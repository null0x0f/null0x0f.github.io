<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NULL&#39;blog</title>
  
  
  <link href="https://null0x0f.github.io/atom.xml" rel="self"/>
  
  <link href="https://null0x0f.github.io/"/>
  <updated>2025-10-16T07:22:52.702Z</updated>
  <id>https://null0x0f.github.io/</id>
  
  <author>
    <name>NULL+</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OPERATING SYSTEM</title>
    <link href="https://null0x0f.github.io/posts/1db60101.html"/>
    <id>https://null0x0f.github.io/posts/1db60101.html</id>
    <published>2025-10-16T07:22:52.702Z</published>
    <updated>2025-10-16T07:22:52.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Computer-Operating-System"><a href="#Computer-Operating-System" class="headerlink" title="Computer Operating System"></a>Computer Operating System</h1><h2 id="导论"><a href="#导论" class="headerlink" title="导论"></a>导论</h2><p>cs -&gt;  hardware(io cpu…)   software(application)   data<br><img src="https://picst.sunbangyan.cn/2023/10/25/76dabebd956e72310254bf23ec5b18ef.png" alt="计算机系统层次结构"></p><h3 id="interface-接口"><a href="#interface-接口" class="headerlink" title="interface(接口)"></a>interface(接口)</h3><p>hard - hard       example： USB<br>soft - hard    操作系统通过instructions(指令集)      example: printf() API接口</p><h3 id="Virtual-Machine"><a href="#Virtual-Machine" class="headerlink" title="Virtual Machine"></a>Virtual Machine</h3><p>操作系统向用户提供一个容易理解和使用的计算机（虚拟的），用户对这个计算机操作将被操作系统转换成对计算机硬件的操作<br><img src="https://picdm.sunbangyan.cn/2023/10/25/9406aba9ce468b5894d0630adc505403.png" alt="virtualmachine"></p><h2 id="计算机系统组成"><a href="#计算机系统组成" class="headerlink" title="计算机系统组成"></a>计算机系统组成</h2><p>CPU RAM DISK  IOdevice …..</p><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><p>当所有事情发生时，CPU收到一个中断信号<br>CPU停下来正在做的事，转而执行中断处理程序，执行完毕会回到之前被中断的地方继续执行<br>操作系统是一个以中断驱动的系统</p><h3 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h3><p>cpu负责将指令从内存读入，所以程序必须在内存中才能运行<br>内存以字节为存储单位，每个字节都有一个地址与之对应，通过load/store指令可以访问指定地址的内存数据<br>load：将内存数据装入寄存器(Register)<br>store:将寄存器数据写入内存<br><img src="https://picst.sunbangyan.cn/2023/10/25/664d0258abf8a2e0be4dc74675c1a7c4.png" alt="memory"></p><h3 id="I-O结构"><a href="#I-O结构" class="headerlink" title="I/O结构"></a>I/O结构</h3><p><img src="https://picdl.sunbangyan.cn/2023/10/25/0a7883f617b0bfaeff96681c9d55cd1b.png" alt="IO"></p><h2 id="系统体系结构"><a href="#系统体系结构" class="headerlink" title="系统体系结构"></a>系统体系结构</h2><h3 id="单处理器系统"><a href="#单处理器系统" class="headerlink" title="单处理器系统"></a>单处理器系统</h3><p><img src="https://picdl.sunbangyan.cn/2023/10/25/a13ce7d888d21cce6ad57f5d46e2291b.png" alt="单处理"></p><h3 id="多处理系统"><a href="#多处理系统" class="headerlink" title="多处理系统"></a>多处理系统</h3><p>两个或多个CPU<br>非对称处理<br>对称处理</p><h3 id="集群系统-gt-cloud-computing-云计算"><a href="#集群系统-gt-cloud-computing-云计算" class="headerlink" title="集群系统    -&gt;cloud computing  云计算"></a>集群系统    -&gt;cloud computing  云计算</h3><p>若干节点，多台计算机通过网络连接在一起,节点之间是松耦合关系<br>高可用<br>高性能计算</p><h2 id="操作系统结构"><a href="#操作系统结构" class="headerlink" title="操作系统结构"></a>操作系统结构</h2><h3 id="单用户单道模式"><a href="#单用户单道模式" class="headerlink" title="单用户单道模式"></a>单用户单道模式</h3><h3 id="多道程序设计"><a href="#多道程序设计" class="headerlink" title="多道程序设计"></a>多道程序设计</h3><p>让CPU总有一个执行任务</p><h3 id="分时系统-多任务系统"><a href="#分时系统-多任务系统" class="headerlink" title="分时系统(多任务系统)"></a>分时系统(多任务系统)</h3><p>多个用户共享一天计算机<br>分时系统为每个用户轮流分配等量的CPU时间<br>发出指令到即时结果的时间为响应时间</p><h3 id="提供服务"><a href="#提供服务" class="headerlink" title="提供服务"></a>提供服务</h3><p><img src="https://picss.sunbangyan.cn/2023/10/25/587c25c771d46a0d77f029963c41d7a1.png" alt="操作系统提供服务"><br>user interface 面向user<br>CLI   GUI   Batch<br>system calls 面向开发者<br><img src="https://picss.sunbangyan.cn/2023/10/25/eab402fe02203fc3b6775bbca2ee78f0.png" alt="标准c程序"><br>usermode:执行用户代码<br>kernelmode:执行os代码<br>目的：确保os正确运行<br>实现方式：0表示kernel模式 1表示user模式<br><img src="https://picss.sunbangyan.cn/2023/10/25/5eacfc68ad528cc90914b74619b9f914.png" alt="trap"></p><h2 id="process-Concept"><a href="#process-Concept" class="headerlink" title="process Concept"></a>process Concept</h2><h3 id="definition"><a href="#definition" class="headerlink" title="definition"></a>definition</h3><h4 id="process-in-memory"><a href="#process-in-memory" class="headerlink" title="process in memory"></a>process in memory</h4><p><img src="https://picst.sunbangyan.cn/2023/10/25/2e96aea365503afceb24775613b987cd.png" alt="process in memory"></p><h4 id="concurrency"><a href="#concurrency" class="headerlink" title="concurrency"></a>concurrency</h4><p><img src="https://picdl.sunbangyan.cn/2023/10/25/07cd32029802eab7de30638bf5792413.png" alt="并发进程共享cpu"></p><p>进程是一个程序的一次执行过程<br>进程是资源分配，保护和调度的基本单位</p><h3 id="PROCESS-STATE"><a href="#PROCESS-STATE" class="headerlink" title="PROCESS STATE"></a>PROCESS STATE</h3><p>Running:此时进程的代码在cpu上运行<br>Ready:进程具备运行条件，等待分配cpu<br>Waiting:进程在等待某些时间的发生<br><img src="https://picdl.sunbangyan.cn/2023/10/25/9a9db3c465a48c5546b0aec9366cb481.png" alt="进程状态转换"></p><h2 id="process-scheduling"><a href="#process-scheduling" class="headerlink" title="process scheduling"></a>process scheduling</h2><h3 id="进程切换"><a href="#进程切换" class="headerlink" title="进程切换"></a>进程切换</h3><p>切换时机：<br>进入等待状态<br>进程被抢占CPU而进入就绪状态</p><p>切换过程：<br>保存被中断进程的上下文信息<br>修改被中断进程的控制信息<br>将被中断的进程加入相应的状态队列<br>调度一个新的进程并恢复他的上下文信息</p><h4 id="中断技术"><a href="#中断技术" class="headerlink" title="中断技术"></a>中断技术</h4><p>当发生某个异常事件，中止cpu上现行程序的运行<br>引出该事件的处理程序执行<br>执行完毕返回中断点继续执行</p><h5 id="外中断"><a href="#外中断" class="headerlink" title="外中断"></a>外中断</h5><p>来自cpu外部<br>异步中断（随机）</p><h5 id="内中断"><a href="#内中断" class="headerlink" title="内中断"></a>内中断</h5><p>硬件，程序异常，系统调用</p><h5 id="中断处理过程"><a href="#中断处理过程" class="headerlink" title="中断处理过程"></a>中断处理过程</h5><p>context:save the context of the excuting process<br><img src="https://picdl.sunbangyan.cn/2023/10/25/15242bc47aabae4280a85b9ee3abc435.png" alt="中断处理过程"></p><h4 id="特权指令和非特权指令"><a href="#特权指令和非特权指令" class="headerlink" title="特权指令和非特权指令"></a>特权指令和非特权指令</h4><p>privileged instructions: only in kernel mode process switch<br>non - privileged instructions: only in usermode</p><h4 id="进程控制块"><a href="#进程控制块" class="headerlink" title="进程控制块"></a>进程控制块</h4><p><img src="https://picss.sunbangyan.cn/2023/10/25/1f4a76b270a570a1fafde25e28d23c5d.png" alt="进程控制块"></p><h3 id="进程队列"><a href="#进程队列" class="headerlink" title="进程队列"></a>进程队列</h3><p><img src="https://picss.sunbangyan.cn/2023/10/25/154eafa4d3eeb9a76df7acf0ddfd5cce.png" alt="进程队列"></p><h3 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h3><p><img src="https://picdl.sunbangyan.cn/2023/10/25/2536def0751a685f04a0040a661c875b.png" alt="进程调度"></p><h3 id="实验（创建子进程）"><a href="#实验（创建子进程）" class="headerlink" title="实验（创建子进程）"></a>实验（创建子进程）</h3><p>getpid:返回当前进程的id<br>wait(NULL)<br>Wait(NULL)：父进程做完，等待子进程，不加wait（NULL）子进程会变成孤儿进程，孤儿进程会继续运行，但是会把它托管给系统进程（pid=1）</p><h2 id="THREAD"><a href="#THREAD" class="headerlink" title="THREAD"></a>THREAD</h2><h3 id="motivation"><a href="#motivation" class="headerlink" title="motivation"></a>motivation</h3><p>实现并行，把所有执行流封装到一个进程里<br>执行流（线程）</p><h3 id="merit"><a href="#merit" class="headerlink" title="merit"></a>merit</h3><p>响应性<br>资源共享<br>经济<br>可伸缩性</p><h3 id="DEFINITION"><a href="#DEFINITION" class="headerlink" title="DEFINITION"></a>DEFINITION</h3><h3 id="Multithreading-Model"><a href="#Multithreading-Model" class="headerlink" title="Multithreading Model"></a>Multithreading Model</h3><h4 id="用户线程"><a href="#用户线程" class="headerlink" title="用户线程"></a>用户线程</h4><p>ULT在user mode下运行</p><h4 id="内核线程"><a href="#内核线程" class="headerlink" title="内核线程"></a>内核线程</h4><p>KLT在kernel mode下运行，由操作系统支持和管理</p><h4 id="M：1模型"><a href="#M：1模型" class="headerlink" title="M：1模型"></a>M：1模型</h4><p><img src="https://picdl.sunbangyan.cn/2023/10/25/53f7356a09e0b12b31f9f21217b3fe81.png" alt="M1"><br>优：逻辑上提供了多个执行流<br>缺：实际上并不是并行，只占用了一个KLT</p><h4 id="1：1模型"><a href="#1：1模型" class="headerlink" title="1：1模型"></a>1：1模型</h4><p>优：并发加并行<br>缺：空间和时间内核开销</p><h4 id="M-M模型"><a href="#M-M模型" class="headerlink" title="M:M模型"></a>M:M模型</h4><p>优：开销减小<br>缺：实现复杂</p><h3 id="多核编程"><a href="#多核编程" class="headerlink" title="多核编程"></a>多核编程</h3><p><img src="https://picdm.sunbangyan.cn/2023/10/25/3f91e5b7d4c752888775f9d41a9d8e09.png" alt="多核编程"></p><h3 id="多线程实验"><a href="#多线程实验" class="headerlink" title="多线程实验"></a>多线程实验</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;pthread.h&gt;</span><br><span class="line">int value = 100;//共享数据部分属于进程</span><br><span class="line">void* hello(void* arg)</span><br><span class="line">&#123;</span><br><span class="line">   for(int i = 0;i&lt;3;i++)</span><br><span class="line">   &#123;</span><br><span class="line">      printf(&quot;hello(%d)&quot;,value);</span><br><span class="line">      sleep(1);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">void* world(void* arg)</span><br><span class="line">&#123;</span><br><span class="line">for(int i = 0;i&lt;3;i++)</span><br><span class="line">   &#123;</span><br><span class="line">      printf(&quot;world(%d)&quot;,value);</span><br><span class="line">      sleep(3);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">   thread_t tid1,tid2;</span><br><span class="line">   //线程创建函数</span><br><span class="line">   //1.第一个参数传线程id地址</span><br><span class="line">   //2.第二个参数传线程分配地址</span><br><span class="line">   //3.第三个参数传线程函数地址</span><br><span class="line">   //4.第四个参数传线程参数地址</span><br><span class="line">   pthread_create(&amp;tid1,NULL,hello,NULL);</span><br><span class="line">   pthread_create(&amp;tid2,NULL,hello,NULL);</span><br><span class="line">   //等待指定线程结束</span><br><span class="line">   pthread_join(tid1,NULL);</span><br><span class="line">   pthread_join(tid2,NULL);</span><br><span class="line">   printf(&quot;in main thread(%d)&quot;,value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有线程共享数据段<br>线程中局部变量是没用办法在另外一个线程中访问的,局部变量属于线程中自己的栈<br>线程是并发执行的</p><p>等待线程结束的原因（thread_join）：<br><img src="https://picdl.sunbangyan.cn/2023/10/25/63a34230ec710dbfa6e5e6d9e255e2f5.png" alt="多线程实验1"></p><p>实验中Linux命令：<br>编译多线程文件<br>gcc   <strong><strong>.c  -o  </strong></strong> -pthread<br>time 命令获取程序在cpu，用户，实际运行时所需要的时间 </p><p><img src="https://picdm.sunbangyan.cn/2023/10/25/64200993c7f3f8794c3082b79d5ac03a.png" alt="多线程实验2"><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">Caculate</span><span class="params">(<span class="type">void</span>* arg)</span></span><br><span class="line">&#123; </span><br><span class="line">  <span class="type">unsigned</span> seed = time(<span class="literal">NULL</span>);</span><br><span class="line">   <span class="type">int</span> circle_point = <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> square_point = <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> value = *((<span class="type">int</span>*)arg);</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;value*value;i++)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">double</span> rand_x = (<span class="type">double</span>)rand_r(&amp;seed)/RAND_MAX;</span><br><span class="line">      <span class="type">double</span> rand_y = (<span class="type">double</span>)rand_r(&amp;seed)/RAND_MAX;</span><br><span class="line">      <span class="keyword">if</span>(rand_x*rand_x+rand_y*rand_y&lt;=<span class="number">1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        circle_point++;</span><br><span class="line">      &#125;</span><br><span class="line">      square_point++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">double</span> PI = (<span class="number">4.0</span>*circle_point)/square_point;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;PI=%lf in %d times \n&quot;</span>,PI,value*value); </span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> args[<span class="number">10</span>];</span><br><span class="line">   <span class="type">clock_t</span> delta;</span><br><span class="line">   <span class="type">clock_t</span> start = clock();</span><br><span class="line">   <span class="type">pthread_t</span> calculate_pi_thread[<span class="number">10</span>];</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">   &#123;</span><br><span class="line">     args[i] = <span class="number">100</span>+i;</span><br><span class="line">     pthread_create(calculate_pi_thread+i,<span class="literal">NULL</span>,Caculate,args+i);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">   &#123;</span><br><span class="line">      pthread_join(calculate_pi_thread[i],<span class="literal">NULL</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   delta = clock()-start;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;total time is %lf\n&quot;</span>,(<span class="type">double</span>)delta/CLOCKS_PER_SEC);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="LECTURE-6-CPU-SCHEDULING"><a href="#LECTURE-6-CPU-SCHEDULING" class="headerlink" title="LECTURE 6 CPU SCHEDULING"></a>LECTURE 6 CPU SCHEDULING</h2><h3 id="CPU调度程序-基于单处理器"><a href="#CPU调度程序-基于单处理器" class="headerlink" title="CPU调度程序   基于单处理器"></a>CPU调度程序   基于单处理器</h3><p>长进程：占用cpu时间长<br>短进程：占用cpu时间短<br>CPU bonding ： cpu占用密集<br>IO  …..     :<br>非抢占调度：一个进程占用cpu直到进程中断或结束<br>抢占调度(Preemptive scheduling):<br>调度算法性能的衡量：<br><img src="https://picst.sunbangyan.cn/2023/10/25/31b6cbf816e5b0b67b366229c15c4c02.png" alt="调度算法"></p><h3 id="调度性能指标"><a href="#调度性能指标" class="headerlink" title="调度性能指标"></a>调度性能指标</h3><p>ti = tf - ts;（进程提交给系统的时刻是ts，完成时刻是tf）</p><h3 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h3><h4 id="FCFS-队列"><a href="#FCFS-队列" class="headerlink" title="FCFS(队列)"></a>FCFS(队列)</h4><p><a href="https://picss.sunbangyan.cn/2023/10/25/c55d687b0b29a532649ed3f24fcf4671.png">FCFS</a></p><h4 id="时间片轮转（TIME-SHARING）"><a href="#时间片轮转（TIME-SHARING）" class="headerlink" title="时间片轮转（TIME SHARING）"></a>时间片轮转（TIME SHARING）</h4><p><img src="https://picst.sunbangyan.cn/2023/10/25/e535d5bb063979e8e9fba19535c9bc08.png" alt="时间片轮转"><br><img src="https://picst.sunbangyan.cn/2023/10/25/604752a7e9fb369d89b8666efe0779ac.png" alt="RR"><br>算法分析：<br>时间片选取：<br>取值太小： 进程切换开销太大<br>取值太大：响应速度下降<br>选区范围：10ms-100ms</p><p>对长作业切换开销太大</p><h3 id="最短作业优先（SJF）"><a href="#最短作业优先（SJF）" class="headerlink" title="最短作业优先（SJF）"></a>最短作业优先（SJF）</h3><p>下一次调度选择所需要的CPU时间最短的那个进程<br><img src="https://picss.sunbangyan.cn/2023/10/25/3e3665cb41aab8e72a2131fcc3c81218.png" alt="SRTF"><br>长进程可能长时间无法获取CPU<br>很难实现：该算法需要事先知道进程所需CPU时间</p><h3 id="优先级调度"><a href="#优先级调度" class="headerlink" title="优先级调度"></a>优先级调度</h3><p>调度策略：下次调度总是选择优先级最高的进程</p><h4 id="优先级定义"><a href="#优先级定义" class="headerlink" title="优先级定义"></a>优先级定义</h4><p>在Linux中，线程调度优先级由一个整数值表示，范围从0到最高优先级（通常是99）。较高的优先级值表示线程具有更高的优先级。</p><p>静态优先级：优先级保持不变，但会出现不公平现象<br>动态优先级：根据proess占用CPU时间：当进程占用CPU时间越长，慢慢降低优先级<br>   根据进程等待：进程在就绪队列中等待时间越长，就慢慢提升优先级</p><h3 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h3><p><img src="https://picdm.sunbangyan.cn/2023/10/25/703ba641dcf7aa8c83344cc844549b2d.png" alt="调度"></p><h2 id="Linux-线程调度"><a href="#Linux-线程调度" class="headerlink" title="Linux 线程调度"></a>Linux 线程调度</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pthread_attr_t attr  //初始化线程属性为默认</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-Scope"><a href="#1-Scope" class="headerlink" title="1.Scope:"></a>1.Scope:</h3><p>PTHREAD_SCOPE_SYSTEM 系统 scs  Linux 一对一模型<br>PTHREAD_SCOPE_PROCESS 进程 pcs </p><h3 id="2-调度策略，调度优先级"><a href="#2-调度策略，调度优先级" class="headerlink" title="2.调度策略，调度优先级"></a>2.调度策略，调度优先级</h3><p>Scheduling policy :<br>NORMAL :    SHED_OTHER  ,SCHEO_IDLE ,   SCHED_BATCH,<br>REAL TIME:   SCHED_FIFO  ,   SCHED_RR<br>实时的线程总是比普通线程优先级更高</p><p>SCHED_OTHER:  time -sharing   NICE:友好值[-20,19]   PR = 20+NICE[0,39]   PR值越高，优先级越低</p><p>REAL TIME :PR = -1 - proirity_value</p><p>PR:  rt —&gt;  PR = -100</p><p>‘chrt - p pid’-&gt;观察进程调度策略以及他的priority_value<br>‘sudo chrt -f -p || pid’ =&gt; 将皮带进程切换为rt并且设置其 priority_value和policy</p><h2 id="调度策略的过程"><a href="#调度策略的过程" class="headerlink" title="调度策略的过程"></a>调度策略的过程</h2><p><img src="https://picdl.sunbangyan.cn/2023/10/25/da5eba22e056122021481d5ca09b0012.png" alt="调度策略"></p><h2 id="LECTURE-7-进程同步"><a href="#LECTURE-7-进程同步" class="headerlink" title="LECTURE 7 进程同步"></a>LECTURE 7 进程同步</h2><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>在内存中存在若干进程或线程，由操作系统的调度程序采用适当策略将他们调度到CPU上运行，同时维护他们的状态队列</p><p>并发是交替执行<br>宏观上是同时运行<br>微观上是走走停停的</p><p>并发进程关系：<br>独立<br>交互：竞争和协作</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>1.random<br>2.<img src="https://picdm.sunbangyan.cn/2023/10/25/90027f68c07a7b470442a8ce0b301c0c.png" alt="异步"><br>3.<img src="https://picss.sunbangyan.cn/2023/10/25/655a3b6e19710bcc25798854cd686511.png" alt="异步2"></p><p>可能是图中情况，也可能是先执行完t1再执行t2</p><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>维护数据的一致性  数据（协作或交互的进程）</p><p>Mutex lock （互斥锁）解决竞争问题<br>semaphore（信号量）解决协作问题</p><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><h3 id="进程进出临界区协议"><a href="#进程进出临界区协议" class="headerlink" title="进程进出临界区协议"></a>进程进出临界区协议</h3><p>进入临界区前在entry section要请求许可<br>离开临界区后在exit section要归还许可</p><p>管理准则：<br>Mutual exclusion:互斥<br>Progress:前进<br>Bounded waiting：有限等待</p><p>1.section中有位置就必须进去一个<br>2.多个进程只能进去一个，其他进程等待<br>3.等待时间不能无限<br>4.在临界区里进程不能无限在临界区</p><p>测试：y-&gt;获得锁   n-&gt; waiting</p><p>上锁和测试不能被打断</p><h3 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h3><p>test_and_set()<br>compare _and_swap()</p><h3 id="busy-waiting（自旋锁）"><a href="#busy-waiting（自旋锁）" class="headerlink" title="busy waiting（自旋锁）"></a>busy waiting（自旋锁）</h3><p>占用CPU执行空循环进行等待<br>浪费CPU时间<br>进程在等待时没有上下文切换<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//锁初始化</span><br><span class="line">pthread_mutex_t lock = PTHREAD_MUTEX_INTIALIZER</span><br><span class="line">//获取锁</span><br><span class="line">pthread_mutex _lock(&amp;lock)</span><br><span class="line">//释放锁</span><br><span class="line">pthread_mutex_unlock(&amp;lock)</span><br></pre></td></tr></table></figure></p><h2 id="SIGNAL-（信号量）"><a href="#SIGNAL-（信号量）" class="headerlink" title="SIGNAL （信号量）"></a>SIGNAL （信号量）</h2><p>PV操作<br>P:  wait()<br>V:  signal()</p><h3 id="信号量的实现"><a href="#信号量的实现" class="headerlink" title="信号量的实现"></a>信号量的实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">P(s)</span><br><span class="line">&#123;</span><br><span class="line"> while(s&lt;=0)</span><br><span class="line"> do noing;</span><br><span class="line"> s--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">V(s)</span><br><span class="line">&#123;</span><br><span class="line"> s++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>s&lt;=0  P(s) :busy waiting   V(s) :s++<br>s=1    P(s)  :s=0    V(s): s = 2</p><h3 id="信号量的使用"><a href="#信号量的使用" class="headerlink" title="信号量的使用"></a>信号量的使用</h3><p>BINARY SEMAPHORE<br>二值信号量只能是0或1，通常将其初始化为1<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">semaphore mutex = 1;</span><br><span class="line">process p</span><br><span class="line">&#123;</span><br><span class="line">P(mutex);</span><br><span class="line">   critical section</span><br><span class="line"></span><br><span class="line">V(mutex)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>COUNTING SEMAPHORE<br>一般信号量的取值可以是任意数值<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">semaphore road = 2;</span><br><span class="line">process Car</span><br><span class="line">&#123;</span><br><span class="line">  p(road);</span><br><span class="line">   pass the fork</span><br><span class="line">   in the road</span><br><span class="line">  V(road);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>s=1-&gt;竞争<br>s&gt;1-&gt;可用资源数量</p><h3 id="Lab"><a href="#Lab" class="headerlink" title="Lab"></a>Lab</h3><p><img src="https://picss.sunbangyan.cn/2023/10/25/9874e6d4ae9feb20ee8c6c4e593618d5.png" alt="信号量lab"><br>sem_wait()——&gt;P()<br>sem_post()———-&gt;V()</p><h3 id="同步问题"><a href="#同步问题" class="headerlink" title="同步问题"></a>同步问题</h3><p>找到并发进程交互点<br>P操作来调节进程执行速度<br>初始值为0的信号量可以让进程直接进行等待状态<br><img src="https://img1.imgtp.com/2023/10/16/F8UmYWzZ.png" alt="PC.png"><br><img src="https://img1.imgtp.com/2023/10/16/PIJrUqaY.png" alt="PC2.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Semaphore empty = <span class="number">1</span>;</span><br><span class="line">Semaphore full = <span class="number">0</span>;</span><br><span class="line">Producer</span><br><span class="line">&#123;</span><br><span class="line">  P（empty）;</span><br><span class="line">  put</span><br><span class="line">  <span class="title function_">V</span><span class="params">(full)</span>;</span><br><span class="line">&#125;</span><br><span class="line">Consumer</span><br><span class="line">&#123;</span><br><span class="line">   P(full);</span><br><span class="line">    get</span><br><span class="line">   <span class="title function_">V</span><span class="params">(empty)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有界缓冲区<br><img src="https://img1.imgtp.com/2023/10/16/ci5VNhyp.png" alt="有界缓冲区.png"><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">P(mutex);</span><br><span class="line">B[i] = product</span><br><span class="line">in = (in+1)%k;</span><br><span class="line">V(mutex);</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P(mutex);</span><br><span class="line">product = B[out];</span><br><span class="line">out = (out+1)%k</span><br></pre></td></tr></table></figure><br>对进程共享变量实施临界区管理（上锁）<br><img src="https://img1.imgtp.com/2023/10/16/flxp00c2.png" alt="死锁.png"><br>1.不要随意扩大临界区<br>2.empty和full的p，v操作不在同一进程（同步信号量）<br>3.mutex和p，v操作在同一进程（互斥信号量)</p><p><img src="https://picdm.sunbangyan.cn/2023/10/27/5cb8a1ac6825ff43a5f1ffb925ab3b89.png" alt="pgjz"></p><h3 id="同步问题案例"><a href="#同步问题案例" class="headerlink" title="同步问题案例"></a>同步问题案例</h3><p>读者写者问题<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">semaphore rw = 1,mutex=1;</span><br><span class="line">int reader = 0;</span><br><span class="line">Reader</span><br><span class="line">&#123;</span><br><span class="line">p(mutex)</span><br><span class="line">if(reader==0)</span><br><span class="line">&#123;</span><br><span class="line">reader++;</span><br><span class="line"> p(rw);</span><br><span class="line">&#125;</span><br><span class="line">v(mutex)</span><br><span class="line"> read;</span><br><span class="line"> p(mutex)</span><br><span class="line"> reader--;</span><br><span class="line"> if(reader==0)</span><br><span class="line"> &#123;</span><br><span class="line"> v(rw);</span><br><span class="line"> &#125;</span><br><span class="line"> v(mutex)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Writer</span><br><span class="line">&#123;</span><br><span class="line">  p(rw);</span><br><span class="line">  writ  e;</span><br><span class="line">  v(rw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>barber问题<br><img src="https://img1.imgtp.com/2023/10/16/aEb5zmTq.png" alt="barber.png"><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#define Max 3</span><br><span class="line">semphore b = 1,c = 0,mutex = 1;</span><br><span class="line">int waiting = 0;</span><br><span class="line">Barber</span><br><span class="line">&#123;</span><br><span class="line">  p(c);</span><br><span class="line">  p(mutex);</span><br><span class="line">  waiting--;</span><br><span class="line">  v(mutex);</span><br><span class="line">  cut hair</span><br><span class="line">  v(b);</span><br><span class="line">&#125;</span><br><span class="line">Customer</span><br><span class="line">&#123;</span><br><span class="line">   p(mutex);</span><br><span class="line">   if(waiting&lt;Max)</span><br><span class="line">   &#123;</span><br><span class="line">      waiting++;</span><br><span class="line">      v(mutex);</span><br><span class="line">       p(b);</span><br><span class="line">       v(c);</span><br><span class="line">   &#125;</span><br><span class="line">   else</span><br><span class="line">   &#123;</span><br><span class="line">     leaving</span><br><span class="line">   &#125;</span><br><span class="line">   cut hair</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="DEAD-LOCK"><a href="#DEAD-LOCK" class="headerlink" title="DEAD LOCK"></a>DEAD LOCK</h2><p>在多并发进程下，一些进程会去竞争有限的资源，当资源不可用，进程会进入等待状态，在有些时候，等待状态无法被改变（他等待的资源被另外一个进程占有并等待）。<br>饥饿：进程长时间等待<br>死锁：循环等待资源</p><p>产生死锁必要条件:<br>1.互斥使用<br>2.不可剥夺<br>3.占有和等待<br>4.循环等待</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="1-死锁的防止-Prevention"><a href="#1-死锁的防止-Prevention" class="headerlink" title="1.死锁的防止(Prevention)"></a>1.死锁的防止(Prevention)</h4><p>破坏四个必要条件<br>只能破坏循环等待</p><h4 id="2-死锁避免（Avoidance）"><a href="#2-死锁避免（Avoidance）" class="headerlink" title="2.死锁避免（Avoidance）"></a>2.死锁避免（Avoidance）</h4><p>在并发进程中做出妥善安排避免死锁发生</p><p>SAFE STATE<br>按照顺序分配资源给每个进程，避免死锁</p><p>Banker’s algorithm<br>已知系统中所有资源的种类和数量<br>已知进程所需要的各类资源最大需求量<br>该算法可以计算出当前系统状态是否安全<br><img src="https://img1.imgtp.com/2023/10/16/iqYtBTjm.png" alt="安全算法.png"></p><h4 id="3-死锁的检测和恢复"><a href="#3-死锁的检测和恢复" class="headerlink" title="3.死锁的检测和恢复"></a>3.死锁的检测和恢复</h4><p><img src="https://picdm.sunbangyan.cn/2023/10/27/4932acc5f82b254c5d794d934b827f08.png" alt="死锁定理"><br><img src="https://picdl.sunbangyan.cn/2023/10/27/0e4cb28af4a49c6052560ac038e4211a.png" alt="死锁的解除"></p><h2 id="进程内存空间"><a href="#进程内存空间" class="headerlink" title="进程内存空间"></a>进程内存空间</h2><h3 id="逻辑地址和物理地址"><a href="#逻辑地址和物理地址" class="headerlink" title="逻辑地址和物理地址"></a>逻辑地址和物理地址</h3><p>16进制下，<br>9+1=A, A+1=B, B+1=C,C+1＝D, D+1＝E, E+1=F, F+1=10,10+1=11…<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">sample.o:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">0000000000000000 &lt;sum&gt;:</span><br><span class="line">   0:f3 0f 1e fa          endbr64 </span><br><span class="line">   4:55                   push   %rbp</span><br><span class="line">   5:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">   8:89 7d fc             mov    %edi,-0x4(%rbp)</span><br><span class="line">   b:89 75 f8             mov    %esi,-0x8(%rbp)</span><br><span class="line">   e:8b 55 fc             mov    -0x4(%rbp),%edx</span><br><span class="line">  11:8b 45 f8             mov    -0x8(%rbp),%eax</span><br><span class="line">  14:01 d0                add    %edx,%eax</span><br><span class="line">  16:5d                   pop    %rbp</span><br><span class="line">  17:c3                   ret    </span><br><span class="line">//逻辑地址：0，4，5.....</span><br><span class="line"></span><br><span class="line">0000000000000018 &lt;main&gt;:</span><br><span class="line">  18:f3 0f 1e fa          endbr64 </span><br><span class="line">  1c:55                   push   %rbp</span><br><span class="line">  1d:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">  20:be 05 00 00 00       mov    $0x5,%esi//参数传入调用函数</span><br><span class="line">  25:bf 04 00 00 00       mov    $0x4,%edi//参数传入调用函数</span><br><span class="line">  2a:e8 00 00 00 00       call   2f &lt;main+0x17&gt;//调用函数</span><br><span class="line">  2f:89 c6                mov    %eax,%esi</span><br><span class="line">  31:48 8d 05 00 00 00 00 lea    0x0(%rip),%rax        # 38 &lt;main+0x20&gt;</span><br><span class="line">  38:48 89 c7             mov    %rax,%rdi</span><br><span class="line">  3b:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  40:e8 00 00 00 00       call   45 &lt;main+0x2d&gt;</span><br><span class="line">  45:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  4a:5d                   pop    %rbp</span><br><span class="line">  4b:c3                   ret    </span><br><span class="line"></span><br></pre></td></tr></table></figure><br>逻辑地址：给每一条指令提供编号<br>物理地址:内存单元看到的地址</p><p>物理地址=基址+逻辑地址</p><h3 id="进程的内存映像"><a href="#进程的内存映像" class="headerlink" title="进程的内存映像"></a>进程的内存映像</h3><p><img src="https://picst.sunbangyan.cn/2023/10/27/03cc6e0b92401362e0bed796f2999354.png" alt="内存映射"><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int global_ar = 5;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">   static int static_var = 6;</span><br><span class="line">   int local_var=7;</span><br><span class="line">   int *p= (int*)malloc(100);</span><br><span class="line">   //use %lx to show a 64bits address</span><br><span class="line">   printf(&quot;the global_var address is %lx\n&quot;,&amp;global_var);</span><br><span class="line">   printf(&quot;the static_var address is %lx\n&quot;,&amp;static_var);</span><br><span class="line">   printf(&quot;the local_var address is %lx\n&quot;,&amp;local_var);</span><br><span class="line">   printf(&quot;the address which the p points to is%lx\n&quot;,&amp;p);</span><br><span class="line">   free(p);</span><br><span class="line">   sleep(1000);</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$gcc sample2.c -o sample2</span><br><span class="line">$./sample2</span><br><span class="line">#输出结果</span><br><span class="line">the global_var address is 561b0368e010</span><br><span class="line">the static_var address is 561b0368e014</span><br><span class="line">the local_var address is 7ffe6aa505ec</span><br><span class="line">the address which the p points to is7ffe6aa505f0</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps -el</span><br><span class="line"></span><br><span class="line">把sample2的pid记录下来</span><br><span class="line">356275 pts/3    00:00:00 sample2</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$cat /proc/356275/maps</span><br><span class="line">## 输出结果如下</span><br><span class="line">561b0368a000-561b0368b000 r--p 00000000 08:03 1051278             /home/null/Documents/expeiment/sample2</span><br><span class="line">561b0368b000-561b0368c000 r-xp 00001000 08:03 1051278  ##代码段                  /home/null/Documents/expeiment/sample2</span><br><span class="line">561b0368c000-561b0368d000 r--p 00002000 08:03 1051278                    /home/null/Documents/expeiment/sample2</span><br><span class="line">561b0368d000-561b0368e000 r--p 00002000 08:03 1051278                    /home/null/Documents/expeiment/sample2</span><br><span class="line">561b0368e000-561b0368f000 rw-p 00003000 08:03 1051278  ## 数据段           /home/null/Documents/expeiment/sample2</span><br><span class="line">561b04a41000-561b04a62000 rw-p 00000000 00:00 0                          [heap]</span><br><span class="line">7f1499a00000-7f1499a28000 r--p 00000000 08:03 919877                     /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">7f1499a28000-7f1499bbd000 r-xp 00028000 08:03 919877                     /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">7f1499bbd000-7f1499c15000 r--p 001bd000 08:03 919877                     /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">7f1499c15000-7f1499c19000 r--p 00214000 08:03 919877                     /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">7f1499c19000-7f1499c1b000 rw-p 00218000 08:03 919877                     /usr/lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">7f1499c1b000-7f1499c28000 rw-p 00000000 00:00 0 </span><br><span class="line">7f1499c7d000-7f1499c80000 rw-p 00000000 00:00 0 </span><br><span class="line">7f1499c8e000-7f1499c90000 rw-p 00000000 00:00 0 </span><br><span class="line">7f1499c90000-7f1499c92000 r--p 00000000 08:03 919871                     /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">7f1499c92000-7f1499cbc000 r-xp 00002000 08:03 919871                     /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">7f1499cbc000-7f1499cc7000 r--p 0002c000 08:03 919871                     /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">7f1499cc8000-7f1499cca000 r--p 00037000 08:03 919871                     /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">7f1499cca000-7f1499ccc000 rw-p 00039000 08:03 919871                     /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">7ffe6aa32000-7ffe6aa53000 rw-p 00000000 00:00 0                          [stack]</span><br><span class="line">7ffe6aba4000-7ffe6aba8000 r--p 00000000 00:00 0                          [vvar]</span><br><span class="line">7ffe6aba8000-7ffe6abaa000 r-xp 00000000 00:00 0                          [vdso]</span><br><span class="line">ffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0                  [vsyscall]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>高速缓存<br><img src="https://picss.sunbangyan.cn/2023/10/27/e56d6d27aeea32635a1e9bf0ce94e7fd.png" alt="高速缓存"></p><p>保护os:   防止用户进程去读写os的内存空间</p><p>保护用户进程：用户进程之间不能随意存取对方内存空间</p><p>操作正确：地址转换。分配回收</p><h3 id="逻辑地址和物理地址-1"><a href="#逻辑地址和物理地址-1" class="headerlink" title="逻辑地址和物理地址"></a>逻辑地址和物理地址</h3><p>地址转换时机<br>编译时：提前知道这个程序要加载的物理内存的起始地址<br>加载时：加载的时候知道基址R<br>这两个转换时机都是不可移动的<br>运行时：MMU（内存管理单元）将逻辑地址转换为物理地址<br><img src="https://img1.imgtp.com/2023/10/16/b8jdC7LY.png" alt="MMU.png"></p><h3 id="CONTIGUOUS-MEMORY-ALLOCATION"><a href="#CONTIGUOUS-MEMORY-ALLOCATION" class="headerlink" title="CONTIGUOUS MEMORY ALLOCATION"></a>CONTIGUOUS MEMORY ALLOCATION</h3><h4 id="FIXED-SIZED-PARTITION"><a href="#FIXED-SIZED-PARTITION" class="headerlink" title="FIXED_SIZED PARTITION"></a>FIXED_SIZED PARTITION</h4><p>将内存划分成不同一些固定容量的分区，每个分区都可能包含一个进程</p><h4 id="VARIABLE-PARTITION-可变分区"><a href="#VARIABLE-PARTITION-可变分区" class="headerlink" title="VARIABLE_PARTITION  可变分区"></a>VARIABLE_PARTITION  可变分区</h4><p><img src="https://img1.imgtp.com/2023/10/16/GplotZod.png" alt="可变分区.png"><br><img src="https://picdl.sunbangyan.cn/2023/10/27/20f62e58fb00656860f2edd4b8986e87.png" alt="holes"><br>动态存储分配方案:<br>首次适应<br>发呢配首个足够大的hole，效率最高<br>最佳适应<br>分配最小的足够大的hole，浪费最小<br>最坏适应，发配的孔，产生的剩余孔更可能再利用</p><p>地址转换与保护:<br><img src="https://picss.sunbangyan.cn/2023/10/27/620d3edfeb22dba3ecb576aeb36aafff.png" alt="地址转换与保护"></p><p>碎片问题:<br>compaction<br>static relocation<br>cost</p><h2 id="分段和分页"><a href="#分段和分页" class="headerlink" title="分段和分页"></a>分段和分页</h2><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>针对碎片的解决方案<br>内部：固定分区<br>外部：可变分区</p><h3 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h3><p><img src="https://img1.imgtp.com/2023/10/16/uAMieSEY.png" alt="划分段.png"></p><h4 id="分段硬件"><a href="#分段硬件" class="headerlink" title="分段硬件"></a>分段硬件</h4><p><img src="https://picdm.sunbangyan.cn/2023/10/27/f477668f395297e54dbd1eaa762f2ee5.png" alt="分段硬件"></p><h5 id="16为位段式地址转换实例"><a href="#16为位段式地址转换实例" class="headerlink" title="16为位段式地址转换实例:"></a>16为位段式地址转换实例:</h5><p>pc寄存器存放的值是cpu下一条要执行的指令的地址</p><p>假设逻辑地址段号占2bits  ，  段内位移占14bits    pc寄存器的值为0x240<br>逻辑地址:0000 0010 0100 0000<br>段号是0x0<br>段内位移是0x240<br><img src="https://img1.imgtp.com/2023/10/16/O2GsYxgr.png" alt="16段转换实例.png"></p><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>frame：页框<br>page：页面<br>页表：page table<br><img src="https://picdm.sunbangyan.cn/2023/10/27/b352d2f1bc6276e8436abd6893c75b16.png" alt="分页基本方法"></p><h4 id="页号和页内位移"><a href="#页号和页内位移" class="headerlink" title="页号和页内位移"></a>页号和页内位移</h4><p><img src="https://picdl.sunbangyan.cn/2023/10/16/1efe7c7e346cdbb27028c7cf00cc15bc.png" alt="页号与页内位移"></p><h4 id="分页硬件"><a href="#分页硬件" class="headerlink" title="分页硬件"></a>分页硬件</h4><p><img src="https://picdl.sunbangyan.cn/2023/10/16/c42ddbbac1f8dcee8e4c674568be2063.png" alt="分页硬件"></p><h4 id="分页计算物理地址"><a href="#分页计算物理地址" class="headerlink" title="分页计算物理地址"></a>分页计算物理地址</h4><p><img src="https://picss.sunbangyan.cn/2023/10/16/3a44019437cc1341553a17da9b430d21.jpg" alt="分页计算物理地址"></p><h2 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h2><p>页面大小<br>逻辑地址长度为mbits，页面大小 2的n次方 bytes<br>页内位移占 n bits<br>页号占m-n bits</p><h3 id="快表"><a href="#快表" class="headerlink" title="快表"></a>快表</h3><p>TLB（Translation Look-aside Buffer）<br><img src="https://picdl.sunbangyan.cn/2023/10/16/0dae982211442b42f25741652dcaadb9.jpg" alt="TLB.pmg"></p><h3 id="页的保护和共享"><a href="#页的保护和共享" class="headerlink" title="页的保护和共享"></a>页的保护和共享</h3><p><img src="https://picdl.sunbangyan.cn/2023/10/16/ec6d3ce0d142fea6301bbca78ca4a517.png" alt="保护"><br><img src="https://picss.sunbangyan.cn/2023/10/16/5fb113e261b6da2b05ca9733d75991e5.png" alt="共享"></p><h3 id="多级页表"><a href="#多级页表" class="headerlink" title="多级页表"></a>多级页表</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Computer-Operating-System&quot;&gt;&lt;a href=&quot;#Computer-Operating-System&quot; class=&quot;headerlink&quot; title=&quot;Computer Operating System&quot;&gt;&lt;/a&gt;Computer Op</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式期末</title>
    <link href="https://null0x0f.github.io/posts/ccc5cd0f.html"/>
    <id>https://null0x0f.github.io/posts/ccc5cd0f.html</id>
    <published>2025-10-16T07:22:52.702Z</published>
    <updated>2025-10-16T07:22:52.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式期末复习（java）"><a href="#设计模式期末复习（java）" class="headerlink" title="设计模式期末复习（java）"></a>设计模式期末复习（java）</h1><h2 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h2><h3 id="uml类图"><a href="#uml类图" class="headerlink" title="uml类图"></a>uml类图</h3><p><img src="https://picdl.sunbangyan.cn/2023/12/14/0eee64788960c70d2eccfddb2885df34.jpeg" alt="工厂模式"></p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>1.使用工厂方法可以让用户的代码和某个特定类的子类的代<br>码解耦。<br>2.工厂方法使用户不必知道它所使用的对象是怎样被创建的<br>，只需知道该对象有哪些方法即可。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>1.不符合开闭原则<br>2.职责过重<br>3.不易扩展</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Rectangle::draw() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Square::draw() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Circle::draw() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个工厂，生成基于给定信息的实体类的对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShapeFactory</span> &#123;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//使用 getShape 方法获取形状类型的对象</span></span><br><span class="line">   <span class="keyword">public</span> Shape <span class="title function_">getShape</span><span class="params">(String shapeType)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(shapeType == <span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">&quot;CIRCLE&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">&quot;RECTANGLE&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">&quot;SQUARE&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用该工厂，通过传递类型信息来获取实体类的对象。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryPatternDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ShapeFactory</span> <span class="variable">shapeFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShapeFactory</span>();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取 Circle 的对象，并调用它的 draw 方法</span></span><br><span class="line">      <span class="type">Shape</span> <span class="variable">shape1</span> <span class="operator">=</span> shapeFactory.getShape(<span class="string">&quot;CIRCLE&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Circle 的 draw 方法</span></span><br><span class="line">      shape1.draw();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取 Rectangle 的对象，并调用它的 draw 方法</span></span><br><span class="line">      <span class="type">Shape</span> <span class="variable">shape2</span> <span class="operator">=</span> shapeFactory.getShape(<span class="string">&quot;RECTANGLE&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Rectangle 的 draw 方法</span></span><br><span class="line">      shape2.draw();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取 Square 的对象，并调用它的 draw 方法</span></span><br><span class="line">      <span class="type">Shape</span> <span class="variable">shape3</span> <span class="operator">=</span> shapeFactory.getShape(<span class="string">&quot;SQUARE&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Square 的 draw 方法</span></span><br><span class="line">      shape3.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><h3 id="uml类图-1"><a href="#uml类图-1" class="headerlink" title="uml类图"></a>uml类图</h3><p><img src="https://picst.sunbangyan.cn/2023/12/14/27244eb4f912c7f1e52d2563bb693447.jpeg" alt="抽象工厂"></p><h3 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h3><p>1.抽象工厂模式可以为用户创建一系列相关的对象，使得用<br>户和创建这些对象的类脱耦。</p><p>2.使用抽象工厂模式可以方便的为用户配置一系列对象。用<br>户使用不同的具体工厂就能得到一组相关的对象，同时也<br>能避免用户混用不同系列中的对象。</p><p>3.在抽象工厂模式中，面对新的“具体产品” ，可以随时<br>增加“具体工厂”为用户提供一组相关的对象。</p><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p>1.不符合开闭原则：当需要新增一种产品时，除了需要添加新的具体产品类，还需要修改抽象工厂的接口和所有具体工厂的实现类，违背了开闭原则。</p><p>2.增加了系统的复杂性：引入抽象工厂模式会增加类的数量，增加了系统的复杂性和理解难度。</p><p>3.不易扩展新的产品族：抽象工厂模式适用于一系列相互依赖的产品对象的创建，但当需要增加新的产品族时，需要修改抽象工厂接口及其所有具体工厂的实现类，不易扩展新的产品族。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为形状创建一个接口。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建实现接口的实体类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Rectangle::draw() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Square.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Square::draw() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Circle.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Circle::draw() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为颜色创建一个接口。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建实现接口的实体类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Red</span> <span class="keyword">implements</span> <span class="title class_">Color</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Red::fill() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Green.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Green</span> <span class="keyword">implements</span> <span class="title class_">Color</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Green::fill() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Blue.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Blue</span> <span class="keyword">implements</span> <span class="title class_">Color</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fill</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Blue::fill() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为 Color 和 Shape 对象创建抽象类来获取工厂。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//AbstractFactory.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> Color <span class="title function_">getColor</span><span class="params">(String color)</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> Shape <span class="title function_">getShape</span><span class="params">(String shape)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建扩展了 AbstractFactory 的工厂类，基于给定的信息生成实体类的对象。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ShapeFactory.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShapeFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Shape <span class="title function_">getShape</span><span class="params">(String shapeType)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(shapeType == <span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">&quot;CIRCLE&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">&quot;RECTANGLE&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">&quot;SQUARE&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Color <span class="title function_">getColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ColorFactory.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColorFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Shape <span class="title function_">getShape</span><span class="params">(String shapeType)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Color <span class="title function_">getColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(color == <span class="literal">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">&quot;RED&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Red</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">&quot;GREEN&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Green</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">&quot;BLUE&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Blue</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个工厂创造器/生成器类，通过传递形状或颜色信息来获取工厂。</span></span><br><span class="line">FactoryProducer.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryProducer</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> AbstractFactory <span class="title function_">getFactory</span><span class="params">(String choice)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(choice.equalsIgnoreCase(<span class="string">&quot;SHAPE&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShapeFactory</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(choice.equalsIgnoreCase(<span class="string">&quot;COLOR&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ColorFactory</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用 FactoryProducer 来获取 AbstractFactory，通过传递类型信息来获取实体类的对象。</span></span><br><span class="line">AbstractFactoryPatternDemo.java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractFactoryPatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取形状工厂</span></span><br><span class="line">      <span class="type">AbstractFactory</span> <span class="variable">shapeFactory</span> <span class="operator">=</span> FactoryProducer.getFactory(<span class="string">&quot;SHAPE&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取形状为 Circle 的对象</span></span><br><span class="line">      <span class="type">Shape</span> <span class="variable">shape1</span> <span class="operator">=</span> shapeFactory.getShape(<span class="string">&quot;CIRCLE&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Circle 的 draw 方法</span></span><br><span class="line">      shape1.draw();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取形状为 Rectangle 的对象</span></span><br><span class="line">      <span class="type">Shape</span> <span class="variable">shape2</span> <span class="operator">=</span> shapeFactory.getShape(<span class="string">&quot;RECTANGLE&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Rectangle 的 draw 方法</span></span><br><span class="line">      shape2.draw();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//获取形状为 Square 的对象</span></span><br><span class="line">      <span class="type">Shape</span> <span class="variable">shape3</span> <span class="operator">=</span> shapeFactory.getShape(<span class="string">&quot;SQUARE&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Square 的 draw 方法</span></span><br><span class="line">      shape3.draw();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取颜色工厂</span></span><br><span class="line">      <span class="type">AbstractFactory</span> <span class="variable">colorFactory</span> <span class="operator">=</span> FactoryProducer.getFactory(<span class="string">&quot;COLOR&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取颜色为 Red 的对象</span></span><br><span class="line">      <span class="type">Color</span> <span class="variable">color1</span> <span class="operator">=</span> colorFactory.getColor(<span class="string">&quot;RED&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Red 的 fill 方法</span></span><br><span class="line">      color1.fill();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取颜色为 Green 的对象</span></span><br><span class="line">      <span class="type">Color</span> <span class="variable">color2</span> <span class="operator">=</span> colorFactory.getColor(<span class="string">&quot;GREEN&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Green 的 fill 方法</span></span><br><span class="line">      color2.fill();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取颜色为 Blue 的对象</span></span><br><span class="line">      <span class="type">Color</span> <span class="variable">color3</span> <span class="operator">=</span> colorFactory.getColor(<span class="string">&quot;BLUE&quot;</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//调用 Blue 的 fill 方法</span></span><br><span class="line">      color3.fill();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单例模式（优缺点）"><a href="#单例模式（优缺点）" class="headerlink" title="单例模式（优缺点）"></a>单例模式（优缺点）</h2><h3 id="uml类图-2"><a href="#uml类图-2" class="headerlink" title="uml类图"></a>uml类图</h3><p><img src="https://picss.sunbangyan.cn/2023/12/14/2edb3c33d1d05512773fdffd83ba83af.jpeg" alt="单例"></p><h3 id="优点：-2"><a href="#优点：-2" class="headerlink" title="优点："></a>优点：</h3><p>系统内存中该类只存在一个对象，节省了系统资源，对于一些需要<br>频繁创建销毁的对象，使用单例模式可以提高系统性能。</p><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><p>当想实例化一个单例类的时候，必须要记住使用相应的获取对象的<br>方法，而不是使用 new ，可能会给其他开发人员造成困扰，特别是<br>看不到源码的时候。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p>饿汉<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EHan</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">EHan</span> <span class="variable">eh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EHan</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">EHan</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EHan <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> eh;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>懒汉<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LanHan</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LanHan lh;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LanHan</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LanHan <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lh == <span class="literal">null</span>) &#123;</span><br><span class="line">           lh = <span class="keyword">new</span> <span class="title class_">LanHan</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lh;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>双重锁<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LanHan</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> LanHan lh;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LanHan</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LanHan <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lh == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LanHan.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (lh == <span class="literal">null</span>) &#123;</span><br><span class="line">                    lh = <span class="keyword">new</span> <span class="title class_">LanHan</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lh;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>静态内部类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wai</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Wai</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Nei</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Wai</span> <span class="variable">wai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Wai</span>();</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> Wai <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Nei.wai;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id="uml类图-3"><a href="#uml类图-3" class="headerlink" title="uml类图"></a>uml类图</h3><p><img src="https://picdl.sunbangyan.cn/2023/12/14/7ec969023f0d709d921790ad51cf53aa.jpeg" alt="适配器"></p><h3 id="优点：-3"><a href="#优点：-3" class="headerlink" title="优点："></a>优点：</h3><p>1.目标（ Target ）和被适配者（ Adaptee ）是完<br>全解耦的关系。</p><p>2.适配器模式满足“开 - 闭原则”。当添加一个<br>实现 Adaptee 接口的新类时，不必修改<br>Adapter ， Adapter 就能对这个新类的实例进行<br>适配。</p><h3 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h3><p>1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。 2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。</p><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><h3 id="uml类图-4"><a href="#uml类图-4" class="headerlink" title="uml类图"></a>uml类图</h3><p><img src="https://picss.sunbangyan.cn/2023/12/14/0501a06de5454a2bf8ef1c3b02d750e6.jpeg" alt="装饰"></p><h3 id="优点：-4"><a href="#优点：-4" class="headerlink" title="优点："></a>优点：</h3><p>1.被装饰者和装饰者是松耦合关系。由于装饰（ Decorator ）仅仅依<br>赖于抽象组件（ Component ），因此具体装饰只知道它要装饰的对象是<br>抽象组件的某一个子类的实例，但不需要知道是哪一个具体子类。</p><p>2.装饰模式满足“开 - 闭原则”。不必修改具体组件，就可以增加新<br>的针对该具体组件的具体装饰。</p><p>3.可以使用多个具体装饰来装饰具体组件的实例。</p><p>4.装饰者模式是继承的有力补充，且比继承灵活，可以在不改变原有对象<br>的情况下动态地给一个对象扩展功能，即插即用</p><h3 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h3><p>1.增加了系统复杂性：引入适配器类增加了系统的复杂性，因为需要额外的类来实现适配器功能。</p><p>2.可能存在性能损失：适配器模式在转换接口的过程中可能需要进行额外的处理和转换，这可能导致一定的性能损失。</p><p>3.不适用于过多的适配器：如果系统中存在大量的适配器类，可能会导致代码混乱和难以维护。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><h4 id="家案例"><a href="#家案例" class="headerlink" title="家案例"></a>家案例</h4><p>接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Component</span> &#123;</span><br><span class="line"> StringBuffer <span class="title function_">show</span><span class="params">(StringBuffer str)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyNewHouse</span> <span class="keyword">implements</span> <span class="title class_">Component</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyNewHouse</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> StringBuffer <span class="title function_">show</span><span class="params">(StringBuffer str)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> str.append( <span class="string">&quot;this is&quot;</span>+name+<span class="string">&quot;home where has:&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Furniture</span> <span class="keyword">implements</span> <span class="title class_">Component</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Component com;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Furniture</span><span class="params">(Component com)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.com=com;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> StringBuffer <span class="title function_">show</span><span class="params">(StringBuffer str)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(com!=<span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> com.show(str);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BingXiang</span> <span class="keyword">extends</span> <span class="title class_">ZhuangShi</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BingXiang</span><span class="params">(Component com)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(com);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> StringBuffer <span class="title function_">show</span><span class="params">(StringBuffer str)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.show(str);</span><br><span class="line"><span class="keyword">return</span> str.append(<span class="string">&quot;bingxiang&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShaFa</span> <span class="keyword">extends</span> <span class="title class_">Furniture</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ShaFa</span><span class="params">(Component com)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(com);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> StringBuffer <span class="title function_">show</span><span class="params">(StringBuffer str)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.show(str);</span><br><span class="line"><span class="keyword">return</span> str.append(<span class="string">&quot; shafa&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TV</span> <span class="keyword">extends</span> <span class="title class_">Furniture</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TV</span><span class="params">(Component com)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(com);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> StringBuffer <span class="title function_">show</span><span class="params">(StringBuffer str)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.show(str);</span><br><span class="line"><span class="keyword">return</span> str.append(<span class="string">&quot;tv&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">MyNewHouse mnh=<span class="keyword">new</span> <span class="title class_">MyNewHouse</span>(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">TV tv=<span class="keyword">new</span> <span class="title class_">TV</span>(mnh);</span><br><span class="line">ShaFa sf=<span class="keyword">new</span> <span class="title class_">ShaFa</span>(tv);</span><br><span class="line">BingXiang bx=<span class="keyword">new</span> <span class="title class_">BingXiang</span>(sf);</span><br><span class="line">System.out.println(bx.show(<span class="keyword">new</span> <span class="title class_">StringBuffer</span>()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="鸟案例"><a href="#鸟案例" class="headerlink" title="鸟案例"></a>鸟案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuoJian</span> <span class="keyword">extends</span> <span class="title class_">JiNeng</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> distance=<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HuoJian</span><span class="params">(Bird bird)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(bird);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> bird.fly()+distance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">juli</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+distance+<span class="string">&quot;��&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> distance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">JiNeng</span> <span class="keyword">extends</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line"><span class="keyword">public</span> Bird bird;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">JiNeng</span><span class="params">(Bird bird)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.bird=bird;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LuoXuanJiang</span> <span class="keyword">extends</span> <span class="title class_">JiNeng</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> distance=<span class="number">50</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LuoXuanJiang</span><span class="params">(Bird bird)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(bird);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> bird.fly()+distance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">juli</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;����������������ǰ����&quot;</span>+distance+<span class="string">&quot;��&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> distance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaQue</span> <span class="keyword">extends</span> <span class="title class_">Bird</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> distance=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> distance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Bird bird=<span class="keyword">new</span> <span class="title class_">MaQue</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;��ֻ����Է��У�&quot;</span>+bird.fly());</span><br><span class="line">System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line">LuoXuanJiang b1=<span class="keyword">new</span> <span class="title class_">LuoXuanJiang</span>(bird);</span><br><span class="line">b1.juli();</span><br><span class="line">System.out.println(<span class="string">&quot;��ֻ����Է��У�&quot;</span>+b1.fly());</span><br><span class="line">System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line">LuoXuanJiang b2=<span class="keyword">new</span> <span class="title class_">LuoXuanJiang</span>(b1);</span><br><span class="line">b2.juli();</span><br><span class="line">System.out.println(<span class="string">&quot;��ֻ����Է��У�&quot;</span>+b2.fly());</span><br><span class="line">System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line">HuoJian b3=<span class="keyword">new</span> <span class="title class_">HuoJian</span>(b2);</span><br><span class="line">b3.juli();</span><br><span class="line">System.out.println(<span class="string">&quot;��ֻ����Է��У�&quot;</span>+b3.fly());</span><br><span class="line">System.out.println(<span class="string">&quot;-------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组装电脑"><a href="#组装电脑" class="headerlink" title="组装电脑"></a>组装电脑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractComputer</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getMsg</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseComputer</span> <span class="keyword">extends</span> <span class="title class_">AbstractComputer</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;电脑&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">5000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NeiCun</span> <span class="keyword">extends</span> <span class="title class_">ZhuangShi</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">NeiCun</span><span class="params">(AbstractComputer com)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(com);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.getMsg()+<span class="string">&quot;+1个内存&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.getPrice()+<span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YingPan</span> <span class="keyword">extends</span> <span class="title class_">ZhuangShi</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">YingPan</span><span class="params">(AbstractComputer com)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(com);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.getMsg()+<span class="string">&quot;+1个硬盘&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.getPrice()+<span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZhuangShi</span> <span class="keyword">extends</span> <span class="title class_">AbstractComputer</span>&#123;</span><br><span class="line"><span class="keyword">private</span> AbstractComputer com;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ZhuangShi</span><span class="params">(AbstractComputer com)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.com=com;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> com.getMsg();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> com.getPrice();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> AbstractComputer com=<span class="keyword">new</span> <span class="title class_">BaseComputer</span>();</span><br><span class="line"> com=<span class="keyword">new</span> <span class="title class_">NeiCun</span>(com);</span><br><span class="line"> com=<span class="keyword">new</span> <span class="title class_">YingPan</span>(com);</span><br><span class="line"> com=<span class="keyword">new</span> <span class="title class_">NeiCun</span>(com);</span><br><span class="line">System.out.println(com.getMsg()+<span class="string">&quot;价格&quot;</span>+com.getPrice());</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="uml类图-5"><a href="#uml类图-5" class="headerlink" title="uml类图"></a>uml类图</h3><p><img src="https://picdm.sunbangyan.cn/2023/12/14/50c505c4ad97a80dacce90ad193be529.jpeg" alt="代理"></p><h3 id="优点：-5"><a href="#优点：-5" class="headerlink" title="优点："></a>优点：</h3><p>1.代理模式可以屏蔽用户真正请求的对象，使用户程序和<br>真正的对象之间解耦。<br>2.使用代理来担当那些创建耗时的对象的替身。</p><h3 id="缺点-5"><a href="#缺点-5" class="headerlink" title="缺点"></a>缺点</h3><p> 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>挖掘机案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RenWu</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">waTu</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">caoCai</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//user 继承Renwu</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">RenWu</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">waTu</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;工人使用挖掘机挖土&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">caoCai</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;工人使用挖掘机炒菜&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaiLiStatic</span> <span class="keyword">implements</span> <span class="title class_">RenWu</span>&#123;</span><br><span class="line"><span class="keyword">private</span> RenWu work;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DaiLiStatic</span><span class="params">(RenWu work)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.work=work;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">waTu</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;劳务中心抽取费用&quot;</span>);</span><br><span class="line">work.waTu();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">caoCai</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;劳务中心抽取费用&quot;</span>);</span><br><span class="line">work.caoCai();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">User user=<span class="keyword">new</span> <span class="title class_">User</span>();<span class="comment">//已存在的工人</span></span><br><span class="line">DaiLiStatic dl=<span class="keyword">new</span> <span class="title class_">DaiLiStatic</span>(user);<span class="comment">//劳务中心找到工人</span></span><br><span class="line"><span class="comment">//让劳务中心做事</span></span><br><span class="line">        dl.waTu();</span><br><span class="line">dl.caoCai();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登录案例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doLogin</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doRegister</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doLogin</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ִ执行登录&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doRegister</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ִ执行注册&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticUser</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;<span class="comment">//实现抽象主题</span></span><br><span class="line"><span class="keyword">private</span> UserDao dao;<span class="comment">//实例具体主题</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StaticUser</span><span class="params">(UserDao dao)</span> &#123;<span class="comment">//传入实际主题</span></span><br><span class="line"><span class="built_in">this</span>.dao=dao;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doLogin</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;代理机构抽取佣金&quot;</span>);</span><br><span class="line">dao.doLogin();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doRegister</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;代理机构抽取佣金&quot;</span>);</span><br><span class="line">dao.doRegister();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">UserDao dao=<span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">StaticUser dl=<span class="keyword">new</span> <span class="title class_">StaticUser</span>(dao);</span><br><span class="line">dl.doLogin();</span><br><span class="line">dl.doRegister();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CalculatorImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现InvocationHandler接口的代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CalculatorProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CalculatorProxy</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Before method invocation&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;After method invocation&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxyExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建目标对象</span></span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalculatorImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建代理对象</span></span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">proxy</span> <span class="operator">=</span> (Calculator) Proxy.newProxyInstance(</span><br><span class="line">                Calculator.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Calculator.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">CalculatorProxy</span>(calculator)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用代理对象的方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> proxy.add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Result: &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><h3 id="uml类图-6"><a href="#uml类图-6" class="headerlink" title="uml类图"></a>uml类图</h3><p><img src="https://picss.sunbangyan.cn/2023/12/14/80960747f313aee679d50aaff9990204.jpeg" alt="责任链"></p><h3 id="优点：-6"><a href="#优点：-6" class="headerlink" title="优点："></a>优点：</h3><p>1、降低耦合度。它将请求的发送者和接收者解耦。 2、简化了对象。使得对象不需要知道链的结构。 3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 4、增加新的请求处理类很方便。</p><h3 id="缺点-6"><a href="#缺点-6" class="headerlink" title="缺点"></a>缺点</h3><p>1、不能保证请求一定被接收。 2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 3、可能不容易观察运行时的特征，有碍于除错。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象处理者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyFilter</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">doFilter</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体处理者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FaceFilter</span> <span class="keyword">implements</span> <span class="title class_">MyFilter</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">doFilter</span><span class="params">(String name)</span> &#123;</span><br><span class="line">String tmp=name.replace(<span class="string">&quot;(:)&quot;</span>, <span class="string">&quot;!!&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;经过表情包过滤&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsgFilter</span> <span class="keyword">implements</span> <span class="title class_">MyFilter</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">doFilter</span><span class="params">(String name)</span> &#123;</span><br><span class="line">String tmp=name.replace(<span class="string">&quot;敏感&quot;</span>, <span class="string">&quot;**&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;经过表情包过滤&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilterChain</span> <span class="keyword">implements</span> <span class="title class_">MyFilter</span>&#123;</span><br><span class="line"><span class="comment">//过滤器每一个人节点都是位移不重复set</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;MyFilter&gt; filters=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;MyFilter&gt;();</span><br><span class="line">    <span class="keyword">public</span>  MyFilterChain  <span class="title function_">addFilter</span><span class="params">(MyFilter filter)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.filters.add(filter);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">doFilter</span><span class="params">(String name)</span> &#123;</span><br><span class="line">String tmp=name;</span><br><span class="line"><span class="keyword">for</span>(MyFilter filter:filters) &#123;</span><br><span class="line">tmp=filter.doFilter(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">String str=<span class="string">&quot;大家敏感好(:)天气不错，铭感风有点大(:)(:),哈哈&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">MyFilterChain</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyFilterChain</span>();</span><br><span class="line">chain.addFilter(<span class="keyword">new</span> <span class="title class_">FaceFilter</span>()).addFilter(<span class="keyword">new</span> <span class="title class_">MsgFilter</span>());</span><br><span class="line"></span><br><span class="line">String result=chain.doFilter(str);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="uml类图-7"><a href="#uml类图-7" class="headerlink" title="uml类图"></a>uml类图</h3><p><img src="https://picst.sunbangyan.cn/2023/12/14/b2192bc970bf7dfbc43cc17bf73e5871.jpeg" alt="观察者"></p><h3 id="优点：-7"><a href="#优点：-7" class="headerlink" title="优点："></a>优点：</h3><p>1.具体主题和具体观察者是松耦合关系。由于主题（ Subject ）接口仅仅依<br>赖于观察者（ Observer ）接口，因此具体主题只是知道它的观察者是实现<br>观察者（ Observer ）接口的某个类的实例，但不需要知道具体是哪个类。<br>同样，由于观察者仅仅关联于主题（ Subject ）接口，因此具体观察者只是<br>知道它依赖的主题是实现主题（ subject ）接口的某个类的实例，但不需要<br>知道具体是哪个类。（即两者都只需和接口打交道，相互扩展性就会高了很<br>多）</p><p>2.观察模式满足“开 - 闭原则”。主题（ Subject ）接口仅仅依赖于观察者<br>（ Observer ）接口，这样，我们就可以让创建具体主题的类也仅仅是依赖<br>于观察者（ Observer ）接口，因此如果增加新的实现观察者（ Observer ）<br>接口的类，不必修改创建具体主题的类的代码。同样，创建具体观察者的类<br>仅仅依赖于主题（ Observer ）接口，如果增加新的实现主题（ Subject ）<br>接口的类，也不必修改创建具体观察者类的代码。</p><h3 id="缺点-7"><a href="#缺点-7" class="headerlink" title="缺点"></a>缺点</h3><p> 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</p><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="uml类图-8"><a href="#uml类图-8" class="headerlink" title="uml类图"></a>uml类图</h3><p><img src="https://picdm.sunbangyan.cn/2023/12/14/ae48bbe20243b59f2de35642d58b4daf.jpeg" alt="策略"></p><h3 id="优点：-8"><a href="#优点：-8" class="headerlink" title="优点："></a>优点：</h3><p>1.上下文（ Context ）和具体策略（ ConcreteStrategy ）是松耦合关系。<br>2.策略模式满足“开 - 闭原则”。当增加新的具体策略时，不需要修改上下文类的代码，上下文就可以引用新的具体策略的实例</p><h3 id="缺点-8"><a href="#缺点-8" class="headerlink" title="缺点"></a>缺点</h3><p>1、策略类会增多。 2、所有策略类都需要对外暴露。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><p>打折案例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">JiSuan</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">jiSuanPrice</span><span class="params">(<span class="type">double</span> price,<span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PuTong</span> <span class="keyword">implements</span> <span class="title class_">JiSuan</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">jiSuanPrice</span><span class="params">(<span class="type">double</span> price, <span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> price*n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZhongJi</span> <span class="keyword">implements</span> <span class="title class_">JiSuan</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">jiSuanPrice</span><span class="params">(<span class="type">double</span> price, <span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> price*n*<span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GaoJi</span> <span class="keyword">implements</span> <span class="title class_">JiSuan</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">jiSuanPrice</span><span class="params">(<span class="type">double</span> price, <span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> price*n*<span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyContext</span> &#123;</span><br><span class="line"><span class="keyword">private</span> JiSuan jisuan;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyContext</span><span class="params">(JiSuan jisuan)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.jisuan=jisuan;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">showPice</span><span class="params">(<span class="type">double</span> price,<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> jisuan.jiSuanPrice(price, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">MyContext c1=<span class="keyword">new</span> <span class="title class_">MyContext</span>(<span class="keyword">new</span> <span class="title class_">PuTong</span>());</span><br><span class="line">MyContext c2=<span class="keyword">new</span> <span class="title class_">MyContext</span>(<span class="keyword">new</span> <span class="title class_">GaoJi</span>());</span><br><span class="line">MyContext c3=<span class="keyword">new</span> <span class="title class_">MyContext</span>(<span class="keyword">new</span> <span class="title class_">ZhongJi</span>());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;pt&quot;</span>+c1.showPice(<span class="number">300</span>, <span class="number">1</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;zj&quot;</span>+c3.showPice(<span class="number">300</span>, <span class="number">1</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;gj&quot;</span>+c2.showPice(<span class="number">300</span>, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>图书馆案例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CeLuo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getQu</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getDo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZouLu</span> <span class="keyword">implements</span> <span class="title class_">CeLuo</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getQu</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;走路&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getDo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;还书&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QiChe</span> <span class="keyword">implements</span> <span class="title class_">CeLuo</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getQu</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;骑车&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getDo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;看书&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KaiChe</span> <span class="keyword">implements</span> <span class="title class_">CeLuo</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getQu</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;开车&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getDo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;paoniu&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyContext</span> &#123;</span><br><span class="line"><span class="keyword">private</span> CeLuo cl;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyContext</span><span class="params">(CeLuo cl)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.cl=cl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toDo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cl.getQu()+<span class="string">&quot;ȥ&quot;</span>+cl.getDo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">MyContext m1=<span class="keyword">new</span> <span class="title class_">MyContext</span>(<span class="keyword">new</span> <span class="title class_">ZouLu</span>());</span><br><span class="line">System.out.println(m1.toDo());</span><br><span class="line"></span><br><span class="line">MyContext m2=<span class="keyword">new</span> <span class="title class_">MyContext</span>(<span class="keyword">new</span> <span class="title class_">QiChe</span>());</span><br><span class="line">System.out.println(m2.toDo());</span><br><span class="line"></span><br><span class="line">MyContext m3=<span class="keyword">new</span> <span class="title class_">MyContext</span>(<span class="keyword">new</span> <span class="title class_">KaiChe</span>());</span><br><span class="line">System.out.println(m3.toDo());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><p>创建型模式，共四种：<br>单例模式、简单工厂模式、工厂方法模式、抽象工<br>厂模式。<br>结构型模式，共三种：<br>适配器模式、装饰者模式、代理模式。<br>行为型模式，共三种：<br>策略模式、观察者模式、责任链模式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式期末复习（java）&quot;&gt;&lt;a href=&quot;#设计模式期末复习（java）&quot; class=&quot;headerlink&quot; title=&quot;设计模式期末复习（java）&quot;&gt;&lt;/a&gt;设计模式期末复习（java）&lt;/h1&gt;&lt;h2 id=&quot;简单工厂&quot;&gt;&lt;a href=&quot;#简</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="https://null0x0f.github.io/posts/79666db.html"/>
    <id>https://null0x0f.github.io/posts/79666db.html</id>
    <published>2025-10-16T07:22:52.701Z</published>
    <updated>2025-10-16T07:22:52.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>树上任意节点的左子树和右子树高度之差不超过1，超过则视为不平衡<br>节点平衡因子 = 左子树高-右子树高</p><p>特性：左子树节点值&lt;根节点值&lt;左子树节点值</p><h3 id="调整最小不平衡子树"><a href="#调整最小不平衡子树" class="headerlink" title="调整最小不平衡子树"></a>调整最小不平衡子树</h3><p>LL 新插入一个节点在左子树的左节点<br>LR<br>RR<br>RL<br>判断方法：从最小的不平衡节点开始操作</p><p>LL：进行右旋，需要将最小的不平衡节点往下三个节点中间的节点作为新的根节点其他两个节点变成左右子树</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;h2 id=&quot;平衡二叉树&quot;&gt;&lt;a href=&quot;#平衡二叉树&quot; class=&quot;headerlink&quot; title=&quot;平衡二叉树&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>jsp_final</title>
    <link href="https://null0x0f.github.io/posts/36dc4835.html"/>
    <id>https://null0x0f.github.io/posts/36dc4835.html</id>
    <published>2025-10-16T07:22:52.701Z</published>
    <updated>2025-10-16T07:22:52.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jsp-finaltest"><a href="#jsp-finaltest" class="headerlink" title="jsp_finaltest"></a>jsp_finaltest</h1><h2 id="jsp执行过程"><a href="#jsp执行过程" class="headerlink" title="jsp执行过程"></a>jsp执行过程</h2><p>客户端向服务器发送请求。<br>服务器接收到请求，并根据请求的URL和其他参数选择对应的处理程序进行处理。<br>翻译阶段：<br>如果请求的处理程序是JSP文件，服务器会翻译JSP文件成为Servlet源代码。<br>编译阶段：<br>并编译成Java字节码文件。如果请求的处理程序是Servlet或者其他Java类文件，服务器则直接编译Java文件成为字节码文件。<br>执行阶段：<br>服务器根据请求创建一个HTTP响应对象，并将响应头信息写入到这个对象中。<br>如果请求的处理程序需要生成HTML内容，服务器会执行相应的Java代码来生成HTML内容，并将HTML内容写入到HTTP响应对象的正文中。<br>服务器将HTTP响应对象发送回给客户端。<br>客户端接收到HTTP响应，解析响应头和正文，并根据响应头中的Content-Type信息来解析正文内容。如果Content-Type是text/html，客户端会将HTML内容解析并显示在浏览器中。</p><h2 id="三种指令"><a href="#三种指令" class="headerlink" title="三种指令"></a>三种指令</h2><h3 id="page"><a href="#page" class="headerlink" title="page"></a>page</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html import = &quot;java.util.*&quot;; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot; isErrorPage=&quot;false&quot; %&gt;</span><br></pre></td></tr></table></figure><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@include file = &quot;***.jsp&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="taglib"><a href="#taglib" class="headerlink" title="taglib"></a>taglib</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=&quot;/WEB-INF/mytaglib.tld&quot; prefix=&quot;mytag&quot; %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Taglib Example&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Taglib Example&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;The following is a custom tag:&lt;/p&gt;</span><br><span class="line">    &lt;mytag:hello name=&quot;World&quot; /&gt;</span><br><span class="line">    &lt;p&gt;You can view the source code of this page to see how to use custom tags in JSP.&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>我们使用了taglib指令导入了一个名为mytag的自定义标签库。在JSP页面的正文部分，我们使用了<mytag:hello>标签来调用自定义标签库中的hello标签，并传入了一个名为name的参数，值为World。在实际运行时，JSP容器会将<mytag:hello>标签转换为对应的Java代码，然后执行这段代码，最后将执行结果输出到浏览器中.</p><h2 id="jsp声明"><a href="#jsp声明" class="headerlink" title="jsp声明"></a>jsp声明</h2><p><img src="https://img1.imgtp.com/2023/06/18/ZKNbzIJc.png" alt="jsp声明"><br>&lt;%! … %&gt;</p><h2 id="jsp脚本"><a href="#jsp脚本" class="headerlink" title="jsp脚本"></a>jsp脚本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%int a = 10;</span><br><span class="line">int b = 5;</span><br><span class="line">int result = a+b%&gt;//脚本</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="jsp表达式"><a href="#jsp表达式" class="headerlink" title="jsp表达式"></a>jsp表达式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">String name = &quot;World&quot;;</span><br><span class="line">out.print(&quot;Hello, &quot; + name);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h2 id="jsp注释"><a href="#jsp注释" class="headerlink" title="jsp注释"></a>jsp注释</h2><!-- HTML --><p>&lt;%—  JSP —%&gt;</p><p>脚本内: //   /*</p><h2 id="内置对象，流转对象"><a href="#内置对象，流转对象" class="headerlink" title="内置对象，流转对象"></a>内置对象，流转对象</h2><p>流转:request response<br>作用域:pageContext,request,session,application<br>其他:out,config,exception,page</p><p>request对象的原型是javax.servlet.http.HttpServletRequest类<br>response对象的原型是javax.servlet.http.HttpServletResponse类<br>out对象的原型是javax.servlet.jsp.JspWriter类<br>session对象的原型是javax.servlet.http.HttpSession类<br>application对象的原型是javax.servlet.ServletContext类<br>config对象的原型是javax.servlet.ServletConfig类<br>pageContext对象的原型是javax.servlet.jsp.PageContext类<br>page对象的原型是生成的JSP页面类<br>exception对象的原型是java.lang.Throwable类或其子类<br><img src="https://img1.imgtp.com/2023/06/18/a3NKa3DY.png" alt="内置对象.png"></p><h2 id="请求转发重定向"><a href="#请求转发重定向" class="headerlink" title="请求转发重定向"></a>请求转发重定向</h2><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><h4 id="请求传递："><a href="#请求传递：" class="headerlink" title="请求传递："></a>请求传递：</h4><p>用户向服务器a请求，a将需求传递给b，b直接将结果返回给用户</p><h4 id="请求包含"><a href="#请求包含" class="headerlink" title="请求包含"></a>请求包含</h4><p>用户向服务器a请求，a将需求传递给b，b将结果传递给a，a整合结果，返回给用户</p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>用户向a服务器请求，a返回一个b服务器的地址给用户，用户访问b的服务器，b服务器返回一个信息给用户。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p><img src="https://img1.imgtp.com/2023/06/18/Ay8DoZ1L.png" alt="redirect"></p><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><p>session<br>code:<br>在这个例子中，如果用户名和密码正确，就将用户名保存在session中，并重定向到欢迎页面（例如welcome.jsp）；否则重定向回登录页面，并附加一个错误参数（例如?error=1）。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class LoginServlet extends HttpServlet &#123;</span><br><span class="line">    public void doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">            throws ServletException, IOException &#123;</span><br><span class="line">        String username = request.getParameter(&quot;username&quot;);</span><br><span class="line">        String password = request.getParameter(&quot;password&quot;);</span><br><span class="line">        if (&quot;admin&quot;.equals(username) &amp;&amp; &quot;123456&quot;.equals(password)) &#123;</span><br><span class="line">            HttpSession session = request.getSession();</span><br><span class="line">            session.setAttribute(&quot;username&quot;, username);</span><br><span class="line">            response.sendRedirect(&quot;welcome.jsp&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            response.sendRedirect(&quot;login.jsp?error=1&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在受保护的资源（例如admin.jsp）中，先检查session中是否包含已登录用户的信息，如果没有则重定向到登录页面：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class AdminServlet extends HttpServlet &#123;</span><br><span class="line">    public void doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line">            throws ServletException, IOException &#123;</span><br><span class="line">        HttpSession session = request.getSession(false);</span><br><span class="line">        if (session == null || session.getAttribute(&quot;username&quot;) == null) &#123;</span><br><span class="line">            response.sendRedirect(&quot;login.jsp&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        // 省略其他处理代码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="cookie和session的区别"><a href="#cookie和session的区别" class="headerlink" title="cookie和session的区别"></a>cookie和session的区别</h3><p><img src="https://img1.imgtp.com/2023/06/18/C8dUqihk.png" alt="cookie"></p><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><p> 以下是一些常用的EL表达式：<br>获取请求参数：${param.paramName}，其中paramName是请求参数的名称；<br>获取请求属性：${request.attributeName}，其中attributeName是请求属性的名称；<br>获取session属性：${session.attributeName}，其中attributeName是session属性的名称；<br>获取ServletContext属性：${application.attributeName}，其中attributeName是ServletContext属性的名称；</p><h3 id="EL内置对象"><a href="#EL内置对象" class="headerlink" title="EL内置对象"></a>EL内置对象</h3><p>获取JSP页面作用域（page scope）属性：${pageScope.attributeName}，其中attributeName是页面作用域属性的名称；<br>获取JSP页面上下文（request scope）属性：${requestScope.attributeName}，其中attributeName是页面上下文属性的名称；<br>获取JSP页面会话（session scope）属性：${sessionScope.attributeName}，其中attributeName是页面会话属性的名称；<br>获取JSP页面应用程序（application scope）属性：${applicationScope.attributeName}，其中attributeName是页面应用程序属性的名称；<br>code:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Hello, EL!&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello, $&#123;param.name&#125;!&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Your email address is: $&#123;request.email&#125;&lt;/p&gt;</span><br><span class="line">    &lt;c:if test=&quot;$&#123;empty param.name&#125;&quot;&gt;</span><br><span class="line">        &lt;p&gt;Please enter your name.&lt;/p&gt;</span><br><span class="line">    &lt;/c:if&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="jstl标签"><a href="#jstl标签" class="headerlink" title="jstl标签"></a>jstl标签</h3><h4 id="通用标签"><a href="#通用标签" class="headerlink" title="通用标签"></a>通用标签</h4><p>set,out,remove<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:set var=&quot;example&quot;value = &quot;$&#123;100+1&#125;&quot;scope = &quot;session&quot;/&gt;</span><br><span class="line">&lt;c:out value = &quot;$&#123;example&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><br>输出101   scope :填内置对象<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:remove var = &quot;example&quot;scope=&quot;session&quot;/&gt;</span><br></pre></td></tr></table></figure><br>删除example变量</p><h4 id="条件标签"><a href="#条件标签" class="headerlink" title="条件标签"></a>条件标签</h4><p>if<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;JSTL If Example&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;c:set var=&quot;score&quot; value=&quot;80&quot;/&gt;</span><br><span class="line">    &lt;c:if test=&quot;$&#123;score &gt;= 60&#125;&quot;&gt;</span><br><span class="line">        &lt;p&gt;Congratulations, you passed the exam!&lt;/p&gt;</span><br><span class="line">    &lt;/c:if&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><br>choose<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;JSTL Choose Example&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;c:set var=&quot;fruit&quot; value=&quot;apple&quot; /&gt;</span><br><span class="line">    &lt;c:choose&gt;</span><br><span class="line">        &lt;c:when test=&quot;$&#123;fruit eq &#x27;apple&#x27;&#125;&quot;&gt;</span><br><span class="line">            &lt;p&gt;It&#x27;s an apple.&lt;/p&gt;</span><br><span class="line">        &lt;/c:when&gt;</span><br><span class="line">        &lt;c:when test=&quot;$&#123;fruit eq &#x27;banana&#x27;&#125;&quot;&gt;</span><br><span class="line">            &lt;p&gt;It&#x27;s a banana.&lt;/p&gt;</span><br><span class="line">        &lt;/c:when&gt;</span><br><span class="line">        &lt;c:otherwise&gt;</span><br><span class="line">            &lt;p&gt;It&#x27;s not an apple or a banana.&lt;/p&gt;</span><br><span class="line">        &lt;/c:otherwise&gt;</span><br><span class="line">    &lt;/c:choose&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h4 id="迭代标签"><a href="#迭代标签" class="headerlink" title="迭代标签"></a>迭代标签</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;JSTL ForEach Example&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;c:set var=&quot;fruits&quot; value=&quot;$&#123;[&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;]&#125;&quot; /&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;c:forEach items=&quot;$&#123;fruits&#125;&quot; var=&quot;fruit&quot;&gt;</span><br><span class="line">            &lt;li&gt;$&#123;fruit&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h2><h3 id="servlet生命周期"><a href="#servlet生命周期" class="headerlink" title="servlet生命周期"></a>servlet生命周期</h3><p>start-&gt;init()-&gt;service()-&gt;destroy()</p><h3 id="servlet注解"><a href="#servlet注解" class="headerlink" title="servlet注解"></a>servlet注解</h3><p>1.@webservlet:用于定义一个Servlet，可以指定Servlet的名称、URL映射等信息<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@WebServlet(name = &quot;MyServlet&quot;, urlPatterns = &quot;/myservlet&quot;)//或者@WebServlet(&quot;/MyServlet&quot;)</span><br><span class="line">public class MyServlet extends HttpServlet &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>2.@WebInitParam：用于为Servlet指定初始化参数，可以在Servlet代码中通过getInitParameter()方法获取这些参数的值。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@WebServlet(name = &quot;MyServlet&quot;, urlPatterns = &quot;/myservlet&quot;, initParams = &#123;</span><br><span class="line">        @WebInitParam(name = &quot;username&quot;, value = &quot;admin&quot;),</span><br><span class="line">        @WebInitParam(name = &quot;password&quot;, value = &quot;123456&quot;)&#125;)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">public class MyServlet extends HttpServlet &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.@WebFilter：用于定义一个过滤器，可以指定过滤器的名称、URL映射等信息。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@WebFilter(filterName = &quot;MyFilter&quot;, urlPatterns = &quot;/*&quot;)</span><br><span class="line">public class MyFilter implements Filter &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>4.@WebListener：用于定义一个监听器，可以指定监听的事件类型等信息。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@WebListener</span><br><span class="line">public class MyContextListener implements ServletContextListener &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@WebServlet(&quot;/login&quot;)</span><br><span class="line">public class LoginServlet extends HttpServlet &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">    </span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        String username = request.getParameter(&quot;username&quot;);</span><br><span class="line">        String password = request.getParameter(&quot;password&quot;);</span><br><span class="line">        </span><br><span class="line">        if (&quot;admin&quot;.equals(username) &amp;&amp; &quot;123456&quot;.equals(password)) &#123;</span><br><span class="line">            request.getRequestDispatcher(&quot;welcome.jsp&quot;).forward(request, response);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            request.setAttribute(&quot;errorMsg&quot;, &quot;Invalid username or password!&quot;);</span><br><span class="line">            request.getRequestDispatcher(&quot;index.jsp&quot;).forward(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="java-Bean"><a href="#java-Bean" class="headerlink" title="java Bean"></a>java Bean</h2><p>Java Bean的基本原则包括以下几点：</p><p>1.实现Serializable接口(共有类)：Java Bean类必须实现Serializable接口，以便能够在网络上传输或者在不同的Java应用程序之间进行传递。</p><p>2.封装属性：Java Bean类应该将属性封装起来，通过公共的getter和setter方法来访问和修改属性值。</p><p>3.提供无参构造器：Java Bean类必须提供一个无参构造器，以便能够通过反射创建实例。</p><p>4.实现序列化<br>常见的三种Java Bean包括：</p><p>实体Bean：用于封装数据的Java Bean，通常包含一些属性和对应的getter和setter方法，以及一些辅助方法。entity类</p><p>业务Bean：用于提供一些服务的Java Bean，例如计算、数据转换等，通常包含一些公共方法。<br>业务类，service类<br>持久化Bean：数据库访问类，dao类</p><h2 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h2><p>mvc:model,view,controller<br>主要目的是将应用程序的业务逻辑和用户界面分离，以便更好地管理和维护代码。</p><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><p><img src="https://img1.imgtp.com/2023/06/18/RwUcdItS.png" alt="benefit"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>model:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private String gender;</span><br><span class="line"></span><br><span class="line">    public Student(int id, String name, int age, String gender) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getGender() &#123;</span><br><span class="line">        return gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setGender(String gender) &#123;</span><br><span class="line">        this.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="view"><a href="#view" class="headerlink" title="view"></a>view</h4><p>add.jsp<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Add Student&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Add Student&lt;/h1&gt;</span><br><span class="line">    &lt;form action=&quot;addStudent&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;name&quot;&gt;Name:&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot; required&gt;&lt;br&gt;</span><br><span class="line">        &lt;label for=&quot;age&quot;&gt;Age:&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;number&quot; id=&quot;age&quot; name=&quot;age&quot; min=&quot;0&quot; required&gt;&lt;br&gt;</span><br><span class="line">        &lt;label for=&quot;gender&quot;&gt;Gender:&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;radio&quot; id=&quot;male&quot; name=&quot;gender&quot; value=&quot;Male&quot; required&gt;</span><br><span class="line">        &lt;label for=&quot;male&quot;&gt;Male&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;radio&quot; id=&quot;female&quot; name=&quot;gender&quot; value=&quot;Female&quot; required&gt;</span><br><span class="line">        &lt;label for=&quot;female&quot;&gt;Female&lt;/label&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;Add&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>showlist.jsp<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Student List&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Student List&lt;/h1&gt;</span><br><span class="line">    &lt;table border=&quot;1&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;Name&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;Age&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;Gender&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;Actions&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;% for (Student student : studentList) &#123; %&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;%= student.getId() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;%= student.getName() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;%= student.getAge() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;%= student.getGender() %&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;a href=&quot;deleteStudent?id=&lt;%= student.getId() %&gt;&quot;&gt;Delete&lt;/a&gt;</span><br><span class="line">                &lt;a href=&quot;modifyStudent?id=&lt;%= student.getId() %&gt;&quot;&gt;Modify&lt;/a&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;a href=&quot;add.jsp&quot;&gt;Add Student&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><br>modify.jsp<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Modify Student&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Modify Student&lt;/h1&gt;</span><br><span class="line">    &lt;form action=&quot;modifyStudent&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;&lt;%= student.getId() %&gt;&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;name&quot;&gt;Name:&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot; value=&quot;&lt;%= student.getName() %&gt;&quot; required&gt;&lt;br&gt;</span><br><span class="line">        &lt;label for=&quot;age&quot;&gt;Age:&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;number&quot; id=&quot;age&quot; name=&quot;age&quot; value=&quot;&lt;%= student.getAge() %&gt;&quot; min=&quot;0&quot; required&gt;&lt;br&gt;</span><br><span class="line">        &lt;label for=&quot;gender&quot;&gt;Gender:&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;radio&quot; id=&quot;male&quot; name=&quot;gender&quot; value=&quot;Male&quot; &lt;% if (&quot;Male&quot;.equals(student.getGender())) &#123; %&gt;checked&lt;% &#125; %&gt; required&gt;</span><br><span class="line">        &lt;label for=&quot;male&quot;&gt;Male&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;radio&quot; id=&quot;female&quot; name=&quot;gender&quot; value=&quot;Female&quot; &lt;% if (&quot;Female&quot;.equals(student.getGender())) &#123; %&gt;checked&lt;% &#125; %&gt; required&gt;</span><br><span class="line">        &lt;label for=&quot;female&quot;&gt;Female&lt;/label&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;Save&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><p>AddStudentServlet.java：添加学生的Servlet<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class AddStudentServlet extends HttpServlet &#123;</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        // 获取用户提交的表单数据</span><br><span class="line">        String name = request.getParameter(&quot;name&quot;);</span><br><span class="line">        int age = Integer.parseInt(request.getParameter(&quot;age&quot;));</span><br><span class="line">        String gender = request.getParameter(&quot;gender&quot;);</span><br><span class="line"></span><br><span class="line">        // 创建Student对象，并将其保存到数据库中</span><br><span class="line">        Student student = new Student(name, age, gender);</span><br><span class="line">        StudentDao studentDao = new StudentDaoImpl();</span><br><span class="line">        studentDao.addStudent(student);</span><br><span class="line"></span><br><span class="line">        // 重定向到学生列表页面</span><br><span class="line">        response.sendRedirect(&quot;showList&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>ShowListServlet.java<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class ShowListServlet extends HttpServlet &#123;</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        // 查询数据库中所有的学生信息，并将其保存到request对象中</span><br><span class="line">        StudentDao studentDao = new StudentDaoImpl();</span><br><span class="line">        List&lt;Student&gt; studentList = studentDao.getAllStudents();</span><br><span class="line">        request.setAttribute(&quot;studentList&quot;, studentList);</span><br><span class="line"></span><br><span class="line">        // 转发到学生列表页面</span><br><span class="line">        request.getRequestDispatcher(&quot;showList.jsp&quot;).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>DeleteStudentServlet.java<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class DeleteStudentServlet extends HttpServlet &#123;</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        // 获取要删除的学生的ID，并将其从数据库中删除</span><br><span class="line">        int id = Integer.parseInt(request.getParameter(&quot;id&quot;));</span><br><span class="line">        StudentDao studentDao = new StudentDaoImpl();</span><br><span class="line">        studentDao.deleteStudent(id);</span><br><span class="line"></span><br><span class="line">        // 重定向到学生列表页面</span><br><span class="line">        response.sendRedirect(&quot;showList&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>ModifyStudentServlet.java<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class ModifyStudentServlet extends HttpServlet &#123;</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        // 获取要修改的学生的ID，并将其从数据库中查询出来</span><br><span class="line">        int id = Integer.parseInt(request.getParameter(&quot;id&quot;));</span><br><span class="line">        StudentDao studentDao = new StudentDaoImpl();</span><br><span class="line">        Student student = studentDao.getStudentById(id);</span><br><span class="line"></span><br><span class="line">        // 将查询出来的学生信息保存到request对象中</span><br><span class="line">        request.setAttribute(&quot;student&quot;, student);</span><br><span class="line"></span><br><span class="line">        // 转发到修改学生信息页面</span><br><span class="line">        request.getRequestDispatcher(&quot;modify.jsp&quot;).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        // 获取用户提交的表单数据</span><br><span class="line">        int id = Integer.parseInt(request.getParameter(&quot;id&quot;));</span><br><span class="line">        String name = request.getParameter(&quot;name&quot;);</span><br><span class="line">        int age = Integer.parseInt(request.getParameter(&quot;age&quot;));</span><br><span class="line">        String gender = request.getParameter(&quot;gender&quot;);</span><br><span class="line"></span><br><span class="line">        // 创建Student对象，并更新其在数据库中的信息</span><br><span class="line">        Student student = new Student(id, name, age, gender);</span><br><span class="line">        StudentDao studentDao = new StudentDaoImpl();</span><br><span class="line">        studentDao.updateStudent(student);</span><br><span class="line"></span><br><span class="line">        // 重定向到学生列表页面</span><br><span class="line">        response.sendRedirect(&quot;showList&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jsp-finaltest&quot;&gt;&lt;a href=&quot;#jsp-finaltest&quot; class=&quot;headerlink&quot; title=&quot;jsp_finaltest&quot;&gt;&lt;/a&gt;jsp_finaltest&lt;/h1&gt;&lt;h2 id=&quot;jsp执行过程&quot;&gt;&lt;a href=&quot;#js</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c plus plus</title>
    <link href="https://null0x0f.github.io/posts/d99aa42e.html"/>
    <id>https://null0x0f.github.io/posts/d99aa42e.html</id>
    <published>2023-04-24T03:22:45.000Z</published>
    <updated>2025-10-16T07:22:52.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cpp知识补充"><a href="#cpp知识补充" class="headerlink" title="cpp知识补充"></a>cpp知识补充</h1><p>01 - 侯捷 - C++面向对象高级开发（上下两部曲）</p><p>02 - 侯捷 - STL标准库和泛型编程</p><p>03 - 侯捷 - C++设计模式</p><p>04 - 侯捷 - C++新标准C++11&amp;14</p><p>05 - 侯捷 - C++内存管理机制</p><p>06 - 侯捷 C++ Startup 揭密：C++ 程序的生前和死后</p><p>07、算法原理与实践（选修）</p><p>08、系统设计与实践（选修）</p><p>书籍:c++ primer<br>   effective modern c++<br>   stl源码剖析</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>拿来当c++知识点补充库，顺序不是按照学习的顺序，是感觉哪个不会了，看书或视频补充知识点。</p><h2 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h2><p>定义命名空间<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//如果不引入 using namespace std;就需要我们显示引入,例如std::cout</span><br><span class="line">namespace a</span><br><span class="line">&#123;</span><br><span class="line">  int a = 10;</span><br><span class="line">&#125;</span><br><span class="line">namespace b</span><br><span class="line">&#123;</span><br><span class="line">int a = 20;</span><br><span class="line">namespace c</span><br><span class="line">&#123;</span><br><span class="line">  int a = 30;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>使用命名空间<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">  using namespace a;</span><br><span class="line">using namespace b;</span><br><span class="line">cout &lt;&lt; a::a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; b::a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; b::c::a &lt;&lt; endl;</span><br><span class="line">using b::c::a;</span><br><span class="line">cout &lt;&lt; a;</span><br><span class="line">  </span><br><span class="line">  system(&quot;pause&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不使用using namespace std 原因：<br>如果没有命名空间，这些变量、函数、类的名称将都存在于全局命名空间中，当定义了一个函数名与标准库中函数名相同时，就会发生冲突。<br>比如，我们在自己的程序中定义了一个Stack类，而我们程序中使用的某个库中也可能定义了一个同名的类，此时名称就冲突了。</p><h2 id="顶层const和底层const"><a href="#顶层const和底层const" class="headerlink" title="顶层const和底层const"></a>顶层const和底层const</h2><p>const修饰的变量不可以改变就是顶层const：<br>const int a = 10;<br>底层const：<br>const int &amp;ra = 10;</p><p>c++ primer :当执行对象的拷贝操作时，常量的顶层const不受什么影响，而底层const必须一致</p><p> const引用理解:<br> 1.引用不是对象且不进行拷贝<br> 2.常量引用如果在左侧，右侧可以接任何东西<br> 3.非常量引用 = 常量  error<br> 4.引用如果在等号右侧请忽略引用<br> 5.非常量 = 常引用</p><p>判断方法:<br><img src="/source/img/const1.png" alt="const1"><br><img src="/source/img/const2.png" alt="const2"></p><p>代码详解:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">int i = 0;</span><br><span class="line">const int p = 10;//顶层const(不能被修改)</span><br><span class="line">const int* p1 = &amp;p;</span><br><span class="line">p1 = &amp;i;</span><br><span class="line">//底层const 允许修改p1的值   const 修饰的是int 不能改变的是 *p1  int *p1是个指针，地址没变，里面值改变无所谓   const修饰的是什么,p1就指向的是什么 *p就相当于（const int）*p</span><br><span class="line">    int* const p2 =&amp;i;//顶层const p2的值不允许被修改 p2是个指针，里面存放的是地址，地址是不可以改变的，值是可以改变的。  const  int*p2  然后你可以通过改变p2指向这个内存地址里的值,来改变p2读出来的值</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>const int* p1 = &p;</p><p>p1是一个指向const int类型的指针变量。<br>&amp;p是一个指向int类型变量p的地址。<br>通过将&amp;p赋值给p1，p1成为了一个指向p的const int类型的指针。<br>这意味着p1指向的int类型的数据是只读的，不能通过p1来修改。<br>int* const p2 = &i;</p><p>p2是一个指向int类型的常量指针变量。<br>&amp;i是一个指向int类型变量i的地址。<br>通过将&amp;i赋值给p2，p2成为了一个指向i的int类型的常量指针。<br>这意味着p2指向的int类型数据可以修改，但是p2本身的指向是不可变的，即p2不能指向其他的地址。</p><h2 id="register-加强"><a href="#register-加强" class="headerlink" title="register 加强"></a>register 加强</h2><p>register 关键字请求编译器将局部变量存储于寄存器中。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">register</span> <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">  std::cout&lt;&lt;&amp;a&lt;&lt;endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="引用剖析"><a href="#引用剖析" class="headerlink" title="引用剖析"></a>引用剖析</h2><h3 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">   <span class="type">int</span> &amp;b = a;<span class="comment">//b就是a的别名 int *const b = &amp;a</span></span><br><span class="line">   b= <span class="number">11</span>;<span class="comment">//*b = 11</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用本质"><a href="#引用本质" class="headerlink" title="引用本质"></a>引用本质</h3><p>引用在c++内部实现是一个常量指针<br>Type&amp; name&lt;——&gt;Type * const name</p><h3 id="函数返回值是引用"><a href="#函数返回值是引用" class="headerlink" title="函数返回值是引用"></a>函数返回值是引用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> *<span class="title">get_1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">   <span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回的是本身的一个副本(20)</span></span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">get_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> a = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">   <span class="type">int</span> a2 = <span class="built_in">get_2</span>();<span class="comment">//20</span></span><br><span class="line">   <span class="type">int</span> &amp;a3 = <span class="built_in">get_2</span>();<span class="comment">//返回的是a的本身 地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若返回静态变量或全局变量<br>可以成为其他引用初始值<br>既可以作为右值使用，也可以作为左值使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">g1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">g2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">static</span> <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">  a++;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">g1</span>() =<span class="number">100</span>;<span class="comment">//error </span></span><br><span class="line">   <span class="built_in">g2</span>() = <span class="number">100</span>;<span class="comment">//返回的是变量本身 g2()返回的a当左值使用 </span></span><br><span class="line">   <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="inline-内联函数"><a href="#inline-内联函数" class="headerlink" title="inline 内联函数"></a>inline 内联函数</h2><p> 用来代替宏代码片段<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> inline void fun() </span><br><span class="line">&#123;</span><br><span class="line">   int a = 10;</span><br><span class="line">   cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> #define Myfunc(a,b)((a)&lt;(b)？(a):(b))</span><br><span class="line"> inline int myfunc(int a,int b) </span><br><span class="line">&#123;</span><br><span class="line">   return a&lt;b?a:b</span><br><span class="line">&#125;</span><br><span class="line"> int main()</span><br><span class="line"> &#123;</span><br><span class="line"> int c1 = myfunc(++a,b)//a=2 b = 3 c =2</span><br><span class="line"> int c2 = Myfunc(++a,b)//==&gt;宏展开((++a)&lt;(b)?(++a):(b))</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> 内联不能做声明，必须和函数体实现写在一块<br>adsd</p><h2 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p> 构造函数：完成对属性的初始化工作（先创建的对象先构造）<br> 析构函数：先创建的对象后释放（栈机制）</p><h3 id="构造函数分类"><a href="#构造函数分类" class="headerlink" title="构造函数分类"></a>构造函数分类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class test</span><br><span class="line">&#123;</span><br><span class="line">  private:</span><br><span class="line">  int a,b,c,d;</span><br><span class="line">  public:</span><br><span class="line">  test()//无参构造</span><br><span class="line">  &#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  test(int a,int b)//有参构造</span><br><span class="line">  &#123;</span><br><span class="line">     this-&gt;a = a;</span><br><span class="line">     this-&gt;b = b;</span><br><span class="line">  &#125;</span><br><span class="line">  test(const test&amp; obj)//赋值构造函数</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">   test t2//无参构造</span><br><span class="line">   test t(2,4);//有参调用</span><br><span class="line">   test t1(t);//拷贝构造</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深拷贝和浅拷贝问题"><a href="#深拷贝和浅拷贝问题" class="headerlink" title="深拷贝和浅拷贝问题"></a>深拷贝和浅拷贝问题</h3><h4 id="浅拷贝分析"><a href="#浅拷贝分析" class="headerlink" title="浅拷贝分析"></a>浅拷贝分析</h4><p>默认的拷贝构造函数，编译器提供<br>把对象1的属性拷贝给对象二<br>把指针变量的值拷贝给对象二，并没有把指针变量所指向的内存空间的数据拷贝过来<br>两个指针变量指向同一个空间</p><p>obj2析构函数 把指向的内存空间析构<br>obj2 指向null，obj1仍然指向堆里被释放的内存空间。<br>obj1再析构，还是析构的obj2之前析构的那一块空间，，结果析构两次，造成空间的coredump</p><p>coredump出现原因:<br><img src="/source/img/coredump.png" alt="coredump"></p><h4 id="等号操作也是浅拷贝操作"><a href="#等号操作也是浅拷贝操作" class="headerlink" title="等号操作也是浅拷贝操作"></a>等号操作也是浅拷贝操作</h4><h2 id="临时对象"><a href="#临时对象" class="headerlink" title="临时对象"></a>临时对象</h2><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>构造之后马上析构</p><h3 id="构造函数中调用构造函数"><a href="#构造函数中调用构造函数" class="headerlink" title="构造函数中调用构造函数"></a>构造函数中调用构造函数</h3><p>危险行为</p><h2 id="new-和delete"><a href="#new-和delete" class="headerlink" title="new 和delete"></a>new 和delete</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int *arr = new int[10];</span><br><span class="line">delete []arr;</span><br><span class="line"></span><br><span class="line">//动态分配对象</span><br><span class="line">object *pt = new object;</span><br><span class="line">delete pt;</span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="友元函数和友元类"><a href="#友元函数和友元类" class="headerlink" title="友元函数和友元类"></a>友元函数和友元类</h3><h4 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">friend void modify(A* pa,int _a);</span><br><span class="line">A(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;a = a;</span><br><span class="line">this-&gt;b = b;</span><br><span class="line">&#125;</span><br><span class="line">void geta()</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;this-&gt;a;</span><br><span class="line">&#125;</span><br><span class="line">//声明位置和public和private没关系</span><br><span class="line">private:</span><br><span class="line">int a;</span><br><span class="line">int b;</span><br><span class="line">&#125;;</span><br><span class="line">void modify(A* pa,int _a)</span><br><span class="line">&#123;</span><br><span class="line">pa-&gt;a = _a;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">A a(5, 3);</span><br><span class="line">modify(&amp;a, 100);</span><br><span class="line">a.geta();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h4><h4 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h4><p>这两个都写在vs里了<br><img src="/source/img/%E9%87%8D%E8%BD%BD.png" alt="重载"></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h3 id="访问父类的语法和概念"><a href="#访问父类的语法和概念" class="headerlink" title="访问父类的语法和概念"></a>访问父类的语法和概念</h3><h3 id="派生类的访问控制"><a href="#派生类的访问控制" class="headerlink" title="派生类的访问控制"></a>派生类的访问控制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">类的单个类访问控制</span><br><span class="line">//public 修饰地成员变量方法在类的内部 类的外部都能使用</span><br><span class="line">//protected 修饰的成员变量方法，在类的内部使用，在继承的子类中可用</span><br><span class="line">//private 修饰地成员变量方法只能在类的内部使用 类的外部不行</span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">  public:</span><br><span class="line">  int a;</span><br><span class="line">  void printT()</span><br><span class="line">  &#123;</span><br><span class="line">  cout&lt;&lt;&quot;printT&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  protected:</span><br><span class="line">  int b;</span><br><span class="line">  private:</span><br><span class="line">  int c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class test:public Test</span><br><span class="line">&#123;</span><br><span class="line">  public:</span><br><span class="line">   void user()</span><br><span class="line">   &#123;</span><br><span class="line">     a = 0;//ok</span><br><span class="line">     b= 0;//ok </span><br><span class="line">     c = 0;//error 私有变量</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/source/img/%E6%B4%BE%E7%94%9F%E7%B1%BB%E8%AE%BF%E9%97%AE.png" alt="派生类访问"><br>protect 关键字修饰变量使用，是为了继承</p><h3 id="继承中构造和析构"><a href="#继承中构造和析构" class="headerlink" title="继承中构造和析构"></a>继承中构造和析构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//赋值兼容性原则</span><br><span class="line">//1.基类指针(引用)指向子类对象 可以调用父类方法</span><br><span class="line">class Parent</span><br><span class="line">&#123;</span><br><span class="line">  private:</span><br><span class="line">  int a;</span><br><span class="line">  int b;</span><br><span class="line">  public:</span><br><span class="line">  Parent(int a1,int b1):a(a1),b(b1)&#123;&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">class child</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">int c;</span><br><span class="line">public:</span><br><span class="line">child(int a,int b,int c1):parent(a,b),c(c1)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/source/img/%E7%BB%A7%E6%89%BF1.png" alt="继承1"><br><img src="/source/img/%E7%BB%A7%E6%89%BF2.png" alt="继承2"></p><h3 id="继承和虚函数"><a href="#继承和虚函数" class="headerlink" title="继承和虚函数"></a>继承和虚函数</h3><p>virtual函数:你希望derived class 重新定义它，且你对他已有默认定义<br>pure virtual 函数:erived class 重新定义它，且你对他没有默认定义</p><h3 id="复合和继承"><a href="#复合和继承" class="headerlink" title="复合和继承"></a>复合和继承</h3><h3 id="委托和继承"><a href="#委托和继承" class="headerlink" title="委托和继承"></a>委托和继承<img src="delegation.png" alt="delegation"></h3><p><img src="/source/img/%E5%A7%94%E6%89%982.png" alt="委托2"></p><h2 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class person//抽象基类(类似于接口)</span><br><span class="line">&#123;</span><br><span class="line">protected:</span><br><span class="line">string name;</span><br><span class="line">int height;</span><br><span class="line">int age;</span><br><span class="line">public:</span><br><span class="line">virtual void getinfo() const = 0;//纯虚函数</span><br><span class="line">virtual void action() = 0;</span><br><span class="line">string getname()</span><br><span class="line">&#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">person(string&amp; s, int h,int a) :name(s), height(h),age(a) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class dancer :public person</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">string danceaction;</span><br><span class="line">public:</span><br><span class="line">dancer(string na,int h, int a, string ac) :person(na,h,a)</span><br><span class="line">&#123;</span><br><span class="line">danceaction = ac;</span><br><span class="line">&#125;</span><br><span class="line">void getinfo() const</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;name:&quot; &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;height:&quot; &lt;&lt; height &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;age:&quot; &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;danceaction:&quot; &lt;&lt;danceaction&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">void action()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;dance&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>设计抽象类（通常称为 ABC）的目的，是为了给其他类提供一个可以继承的适当的基类。抽象类不能被用于实例化对象，它只能作为接口使用。如果试图实例化一个抽象类的对象，会导致编译错误。<br>因此，如果一个 ABC 的子类需要被实例化，则必须实现每个纯虚函数，这也意味着 C++ 支持使用 ABC 声明接口。如果没有在派生类中重写纯虚函数，就尝试实例化该类的对象，会导致编译错误。<br>可用于实例化对象的类被称为具体类。<a href="https://www.runoob.com/cplusplus/cpp-interfaces.html">https://www.runoob.com/cplusplus/cpp-interfaces.html</a></p><h3 id="继承的动态内存分配"><a href="#继承的动态内存分配" class="headerlink" title="继承的动态内存分配"></a>继承的动态内存分配</h3><p>基类使用动态内存分配，派生类不使用动态内存分配。<br>可以省略构造函数和析构函数中的内存分配和释放操作，直接继承基类中的构造和析构函数。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class Base &#123;</span><br><span class="line">public:</span><br><span class="line">    Base(const char* str) &#123;</span><br><span class="line">        data_ = new char[strlen(str) + 1];</span><br><span class="line">        strcpy(data_, str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual ~Base() &#123;</span><br><span class="line">        delete[] data_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const char* getData() const &#123;</span><br><span class="line">        return data_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    char* data_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 派生类，不使用动态内存分配</span><br><span class="line">class Derived : public Base &#123;</span><br><span class="line">public:</span><br><span class="line">    Derived(const char* str, int value)</span><br><span class="line">        : Base(str), value_(value) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    int getValue() const &#123;</span><br><span class="line">        return value_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    int value_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>基类使用动态内存分配，派生类也使用动态内存分配<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">class BASE</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">char* base;</span><br><span class="line">public:</span><br><span class="line">BASE(const char *str)</span><br><span class="line">&#123;</span><br><span class="line">base = new char[strlen(str) + 1];</span><br><span class="line">strcpy(base, str);</span><br><span class="line">&#125;</span><br><span class="line">virtual ~BASE()</span><br><span class="line">&#123;</span><br><span class="line">delete[]base;</span><br><span class="line">&#125;</span><br><span class="line">BASE&amp; operator=(const BASE&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">if (this == &amp;str)</span><br><span class="line">&#123;</span><br><span class="line">return *this;</span><br><span class="line">&#125;</span><br><span class="line">delete[]base;</span><br><span class="line">base = new char[strlen(str.base) + 1];</span><br><span class="line">strcpy(base,str.base);</span><br><span class="line">return *this;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">class derived :public BASE</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">char* dervived;</span><br><span class="line">public:</span><br><span class="line">derived(const char* str):BASE(str)</span><br><span class="line">&#123;</span><br><span class="line">dervived = new char[strlen(str) + 1];</span><br><span class="line">strcpy(dervived, str);</span><br><span class="line">&#125;</span><br><span class="line">derived&amp; operator=(const derived&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">if (this == &amp;str)</span><br><span class="line">&#123;</span><br><span class="line">return *this;</span><br><span class="line">&#125;</span><br><span class="line">delete[]dervived;</span><br><span class="line">BASE::operator=(str);</span><br><span class="line">dervived = new char[strlen(str.dervived) + 1];</span><br><span class="line">strcpy(dervived, str.dervived);</span><br><span class="line">return *this;</span><br><span class="line">&#125;</span><br><span class="line">~derived()</span><br><span class="line">&#123;</span><br><span class="line">delete[] dervived;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="conversion-function"><a href="#conversion-function" class="headerlink" title="conversion function"></a>conversion function</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">fraction</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> numrator;</span><br><span class="line"><span class="type">int</span> denominator;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">fraction</span>(<span class="type">int</span> num, <span class="type">int</span> den = <span class="number">1</span>) :<span class="built_in">numrator</span>(num), <span class="built_in">denominator</span>(den) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">double</span>(numrator * <span class="number">1.0</span> / denominator);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">fraction <span class="title">f</span><span class="params">(<span class="number">3</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="type">double</span> d = f + <span class="number">4</span>;</span><br><span class="line">cout &lt;&lt; d;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>double d = 4 + f;这一语句会首先查找Fraction是否有重载操作符 operator + (double, Fraction) 的函数，由于没有，所以调用会转换函数operator double() const。</p><p>另外，转换函数除了可以将一个类型转换成另一个基本类型，还可以将一个类型转换成另一个复合类型（例如string类型）。</p><h4 id="non-explicit-one-argument-ctor"><a href="#non-explicit-one-argument-ctor" class="headerlink" title="non -explicit-one-argument ctor"></a>non -explicit-one-argument ctor</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Fraction </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    Fraction(int num, int den=1) :</span><br><span class="line">        m_numerator(num), m_denominator(den) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    Fraction operator + (const Fraction&amp; f) &#123;</span><br><span class="line">        return Fraction(...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    int m_numerator;  // 分子</span><br><span class="line">    int m_denominator;  // 分母</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Fraction f(3, 5);</span><br><span class="line">Fraction d2 = f + 4; </span><br></pre></td></tr></table></figure><p>只要一个实参就够了，也可以传两个实参。将别的东西转换成这个类对象</p><h4 id="conversion-function-vs-non-explicit-one-argument-constructor"><a href="#conversion-function-vs-non-explicit-one-argument-constructor" class="headerlink" title="conversion function vs. non-explicit-one-argument constructor"></a>conversion function vs. non-explicit-one-argument constructor</h4><h4 id="explicit-one-argument-constructor"><a href="#explicit-one-argument-constructor" class="headerlink" title="explicit-one-argument constructor"></a>explicit-one-argument constructor</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Fraction </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    explicit Fraction(int num, int den=1) :</span><br><span class="line">        m_numerator(num), m_denominator(den) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    operator double() const &#123;</span><br><span class="line">        return (double) (m_numerator / m_denominator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Fraction operator + (const Fraction&amp; f) &#123;</span><br><span class="line">        return Fraction(...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    int m_numerator;  // 分子</span><br><span class="line">    int m_denominator;  // 分母</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Fraction f(3, 5);</span><br><span class="line">Fraction d2 = f + 4;  // [Error] convertion from double to Fraction requested</span><br></pre></td></tr></table></figure><p>由于在构造函数前面增加了explicit关键字，所以不能将4转换成Fraction类型；也不能先将f转换成double类型，与4相加后再将double转换成Fraction。</p><h2 id="pointer-like-classes"><a href="#pointer-like-classes" class="headerlink" title="pointer like classes"></a>pointer like classes</h2><h3 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h3><p>智能指针是你在堆栈上声明的类模板，并可通过使用指向某个堆分配的对象的原始指针进行初始化。 在初始化智能指针后，它将拥有原始的指针。 这意味着智能指针负责删除原始指针指定的内存。 智能指针析构函数包括要删除的调用，并且由于在堆栈上声明了智能指针，当智能指针超出范围时将调用其析构函数，尽管堆栈上的某处将进一步引发异常。</p><p>C++ 中有三种常用的智能指针：</p><ol><li><p>unique_ptr：独占所有权的智能指针，不能被复制，只能被移动。当 unique_ptr 超出作用域时，它所指向的对象会被自动释放。</p></li><li><p>shared_ptr：共享所有权的智能指针，可以被多个 shared_ptr 共享。当最后一个 shared_ptr 超出作用域时，它所指向的对象会被自动释放。</p></li><li><p>weak_ptr：弱引用的智能指针，不能直接访问所指向的对象，必须通过 lock() 函数获得一个 shared_ptr 才能访问。weak_ptr 不会增加所指对象的引用计数，因此不会影响所指对象的生命周期。</p></li></ol><h4 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h4><p>用法：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;memory&gt;</span><br><span class="line">shared_ptr&lt;double&gt; p1(new double(42));</span><br><span class="line">shared_ptr&lt;int&gt;p2= make_shared&lt;int&gt;(42);</span><br></pre></td></tr></table></figure><br>拷贝和赋值<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto r = make_shared&lt;int&gt;(42);//r指向int只有一个引用</span><br><span class="line">r=q;//给r赋值</span><br><span class="line">    //q指向的对象引用次数++</span><br><span class="line">    //r指向对象引用次数--</span><br><span class="line">    //r没有引用了，就会自动释放</span><br></pre></td></tr></table></figure><br>离开作用域，它指向内存也会自动释放<br>但是如果有其他智能指针也指向这块内存，他就不会被释放<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void use_factory(T arg)</span><br><span class="line">&#123;</span><br><span class="line">   shared_ptr&lt;Foo&gt; p = factory(arg);</span><br><span class="line">   return p;//引用计数增加</span><br><span class="line">&#125;//离开作用域但不会被释放</span><br></pre></td></tr></table></figure></p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><h2 id="fuction-like-classes"><a href="#fuction-like-classes" class="headerlink" title="fuction like classes"></a>fuction like classes</h2><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><h3 id="成员模板"><a href="#成员模板" class="headerlink" title="成员模板"></a>成员模板</h3><p><img src="/source/img/%E6%88%90%E5%91%98%E6%A8%A1%E6%9D%BF.png" alt="成员模板.png"></p><h3 id="模板特化"><a href="#模板特化" class="headerlink" title="模板特化"></a>模板特化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">template&lt;&gt;</span><br><span class="line">struct hash&lt;char&gt;</span><br><span class="line">&#123;</span><br><span class="line"> size_t operator()(char x) const</span><br><span class="line">&#123;</span><br><span class="line">   return x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">template&lt;&gt;</span><br><span class="line">struct hash&lt;int&gt;</span><br><span class="line">&#123;</span><br><span class="line"> size_t operator()(int x) const</span><br><span class="line">&#123;</span><br><span class="line">   return x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">template&lt;&gt;</span><br><span class="line">struct hash&lt;long&gt;</span><br><span class="line">&#123;</span><br><span class="line"> size_t operator()(long x) const</span><br><span class="line">&#123;</span><br><span class="line">   return x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="偏特化-局部特化"><a href="#偏特化-局部特化" class="headerlink" title="偏特化(局部特化)"></a>偏特化(局部特化)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class T,class alloc&gt;</span><br><span class="line"> class name</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">template&lt;class alloc&gt;</span><br><span class="line">class name&lt;bool, alloc&gt; </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>范围的偏<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c</span>&lt;T*&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>如果使用者使用的是指针就用第二个模板<br>如果不是指针，用的是第一个模板</p><h3 id="模板模板参数"><a href="#模板模板参数" class="headerlink" title="模板模板参数"></a>模板模板参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class T,template&lt;class T&gt; class smartptr&gt;</span><br><span class="line"></span><br><span class="line">//第一个参数是 T类型 ，第二个参数是一个smartptr，它可以指定一个T类型变量</span><br><span class="line">class XCls</span><br><span class="line">&#123;</span><br><span class="line"> private:</span><br><span class="line"> smartptr&lt;T&gt; sp;</span><br><span class="line"> public:</span><br><span class="line"> XCls():sp(new T)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">XCls&lt;string,shared_ptr&gt; p1;</span><br></pre></td></tr></table></figure><h2 id="三个主题"><a href="#三个主题" class="headerlink" title="三个主题"></a>三个主题</h2><h3 id="pack"><a href="#pack" class="headerlink" title="pack"></a>pack</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename T,typename...Types&gt;</span><br><span class="line">void print(const T&amp;firstArg,const Type&amp;...args)</span><br><span class="line">&#123;</span><br><span class="line">   cout&lt;&lt;firstArg&lt;&lt;endl;</span><br><span class="line">   print(args...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用sizeof…(args)可以知道包有多少</p><h3 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h3><p>auto声明变量必须要赋值</p><h3 id="ranged-base-for"><a href="#ranged-base-for" class="headerlink" title="ranged-base for"></a>ranged-base for</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;double&gt; vec;</span><br><span class="line">for(auto elem:vec)</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;elem&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(auto&amp; elem:vec)</span><br><span class="line">&#123;</span><br><span class="line">  elem*=3;</span><br><span class="line">&#125;//改变原来vec里的值</span><br></pre></td></tr></table></figure><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int x = 0;</span><br><span class="line">int* p = &amp;x;</span><br><span class="line">int&amp; r =x;//r代表x,r不能代表其他的了</span><br><span class="line">int x2 = 5;</span><br><span class="line">r = x2;//r不能代表x，现在r,x都是5</span><br><span class="line">int&amp; r2 =r;</span><br></pre></td></tr></table></figure><p>reference一定要有初值，只能代表一个，不能代表其他</p><p>32位电脑指针占四个字节</p><p>参数传递</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><h2 id="重载new-delete"><a href="#重载new-delete" class="headerlink" title="重载new(),delete()"></a>重载new(),delete()</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Foo &#123;</span><br><span class="line">public:</span><br><span class="line"> void* operator new(std::size_t size)</span><br><span class="line"> &#123;</span><br><span class="line">  std::cout &lt;&lt; &quot;operator new&quot; &lt;&lt; std::endl;</span><br><span class="line">  return std::malloc(size);</span><br><span class="line"> &#125;</span><br><span class="line"> void operator delete(void* ptr)</span><br><span class="line">&#123;</span><br><span class="line"> std::cout &lt;&lt; &quot;operator delete&quot; &lt;&lt; std::endl;</span><br><span class="line"> std::free(ptr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"> Foo* m = new Foo;</span><br><span class="line"> std::cout &lt;&lt; sizeof(m) &lt;&lt; std::endl;</span><br><span class="line"> delete m;</span><br><span class="line"> return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在类中的operator new默认就是static。所以加static可以，不加也是全局，可以正常使用。</p><p>这种重载的意义是和重载operator new配套。只有operator new报异常了，就会调用对应的operator delete。若没有对应的operator delete，则无法释放内存。</p><h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><p>学习网址：zh.cppreference.com</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><p>相比于普通数组，array容器访问速度快，安全性高，在传递方式方面，普通数组作为函数参数时，实际上是传递一个指向数组首元素的指针。而array容器作为函数参数时，实际上传递的是整个array容器的值。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">td::array&lt;int, 5&gt; myarr;</span><br><span class="line">std::array&lt;int, 5&gt; a2;</span><br><span class="line">for (int i =0;i&lt;myarr.size();i++)</span><br><span class="line">&#123;</span><br><span class="line">std::cin &gt;&gt; myarr[i];</span><br><span class="line">&#125;</span><br><span class="line">for (auto it = myarr.begin(); it != myarr.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; &quot;\n&quot;;</span><br><span class="line">std::sort(myarr.begin(),myarr.end());//算法库</span><br><span class="line">std::ostream_iterator&lt;int&gt; output(std::cout,&quot; &quot;);</span><br><span class="line">std::reverse_copy(myarr.begin(), myarr.end(), a2.begin());</span><br><span class="line">std::reverse_copy(myarr.begin(), myarr.end(), output);</span><br><span class="line">std::array&lt;std::string, 5&gt; a3 = &#123; &quot;aefea&quot;,std::string(&quot;a&quot;) &#125;;</span><br><span class="line">for (auto&amp; s : a3)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; s &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上述代码中，sort是algorithm库中函数，能将容器内元素从大到小排序，reversecopy函数详见cppconference</p><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p>能动态调整大小，存储相同类型元素<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;int&gt; vec;</span><br><span class="line">std::vector&lt;int&gt; vec2(5);</span><br><span class="line">std::vector&lt;int&gt; vec3(5, 42);</span><br><span class="line">std::vector&lt;int&gt; vec4(vec3);</span><br><span class="line">vec.push_back(10);</span><br><span class="line">vec.push_back(20);</span><br><span class="line">//vec.pop_back();//删除末尾元素</span><br><span class="line">int first = vec[0]; // 使用数组下标访问元素</span><br><span class="line">int second = vec.at(1); // 使用at()方法访问元素，会检查下标是否越界</span><br><span class="line">//获取容量</span><br><span class="line">size_t size = vec.size();//获取向量大小</span><br><span class="line">size_t capacity = vec.capacity();//分配内存空间大小</span><br><span class="line">//迭代访问</span><br><span class="line">for (auto i : vec)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; i&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line">for (auto it = vec.begin(); it != vec.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; *it &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>data()返回值 : 指向底层元素存储的指针。对于非空容器，返回的指针与首元素地址比较相等。<br>例子：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void span_func(std::span&lt;const int&gt; data) // C++20 起</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; &quot;data = &quot;;</span><br><span class="line">    for (const int e : data)</span><br><span class="line">        std::cout &lt;&lt; e &lt;&lt; &#x27; &#x27;;</span><br><span class="line">    std::cout &lt;&lt; &#x27;\n&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">std::span&lt;int&gt; s&#123;container.data(),container.size() &#125;;</span><br><span class="line">span_func(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>注：span 是c++20新特性</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>双向链表<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">std::list&lt;int&gt; l = &#123;7,5,16,8&#125;;</span><br><span class="line">l.push_back(25);//添加末尾</span><br><span class="line">l.push_front(15);//   开头</span><br><span class="line">std::list&lt;int&gt;::iterator it = std::find(l.begin(),l.end(),16);//用迭代器找到16的位置</span><br><span class="line">if(it!=l.end())</span><br><span class="line">l.insert(it, 42);</span><br><span class="line">std::cout &lt;&lt; *it&lt;&lt;&quot;\n&quot;;</span><br><span class="line">//迭代打印</span><br><span class="line">for (auto i : l)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; i &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>还有pop_back等用法在笔记中不一 一实例了，cppconference中有实例。</p><p>list 的原理：</p><p>list 是通过双向链表实现的，每个节点都包含了指向前一个节点和后一个节点的指针。因此，插入和删除元素时只需要修改相关节点的指针即可，不需要像数组那样进行元素的移动。</p><p>由于 list 中的元素是通过指针进行连接的，因此在访问 list 中的元素时，需要通过迭代器来进行访问。迭代器是指向 list 中元素的指针，支持 ++ 操作来遍历 list 中的元素</p><h4 id="forward-list"><a href="#forward-list" class="headerlink" title="forward list"></a>forward list</h4><p>单向列表（单链表）<br>只能从一端进入和移除，所以只能从容器起始插入和删除</p><h3 id="queue-容器的适配器"><a href="#queue-容器的适配器" class="headerlink" title="queue(容器的适配器 )"></a>queue(容器的适配器 )</h3><p>队列<br>queue是一个单口进出的数据结构，没有迭代器<br>first in first out</p><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>双端队列<br>可以两边扩充</p><p>在 C++ STL 中，deque（双端队列）是一种常用的容器，它可以在两端进行插入和删除操作，并且支持随机访问。deque 内部使用一个动态数组来存储元素，可以动态调整大小以适应元素的添加和删除，同时还可以在数组的两端进行快速插入和删除操作，因此可以高效地实现队列和栈等数据结构。</p><p>简单用法例子：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">std::deque&lt;int&gt; de(10);</span><br><span class="line">/*de.push_back(5);</span><br><span class="line">de.push_front(10);*/</span><br><span class="line">std::deque&lt;int&gt;::iterator it = de.begin();</span><br><span class="line">for (it; it != de.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">int x = 0;</span><br><span class="line">std::cin &gt;&gt; x;</span><br><span class="line">*it = x;</span><br><span class="line">&#125;</span><br><span class="line">for (auto i : de)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="stack-容器的适配器"><a href="#stack-容器的适配器" class="headerlink" title="stack(容器的适配器)"></a>stack(容器的适配器)</h3><p>栈和队列都是不能直接通过构造函数分配元素数量的，必须通过封装vector来实现<br>具体例子：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;int&gt; v(10, 0);</span><br><span class="line"> std::stack&lt;int&gt; s(v);</span><br></pre></td></tr></table></figure></p><h3 id="set-红黑树"><a href="#set-红黑树" class="headerlink" title="set 红黑树"></a>set 红黑树</h3><p>set 中存储的元素是唯一的，插入重复元素会被忽略</p><h4 id="multiset-红黑树"><a href="#multiset-红黑树" class="headerlink" title="multiset(红黑树)"></a>multiset(红黑树)</h4><p>含有 Key 类型对象有序集的容器。与 set 不同，它允许多个 Key 拥有等价的值。用关键比较函数 Compare 进行排序。搜索、插入和移除操作拥有对数复杂度。</p><h4 id="unordered-multiset-哈希表"><a href="#unordered-multiset-哈希表" class="headerlink" title="unordered_multiset(哈希表)"></a>unordered_multiset(哈希表)</h4><p>篮子不能太长，如果元素的个数大于等于篮子，篮子就要重新扩充大于等于两倍的元素个数</p><h4 id="unordered-set-哈希表）"><a href="#unordered-set-哈希表）" class="headerlink" title="unordered_set (哈希表）"></a>unordered_set (哈希表）</h4><h3 id="四个容器区别总结"><a href="#四个容器区别总结" class="headerlink" title="四个容器区别总结"></a>四个容器区别总结</h3><p>set 和 multiset 是基于红黑树实现的关联容器，可以快速插入、删除、查找元素，并且元素默认按照元素值从小到大排序，但插入、删除和查找等操作的时间复杂度为 O(log n)。</p><p>unordered_set 和 unordered_multiset 是基于哈希表实现的关联容器，可以快速插入、删除、查找元素，并且插入、删除和查找等操作的时间复杂度为 O(1)，但元素没有固定的顺序。</p><p>在选择使用哪种容器时，需要考虑元素是否需要排序以及对性能的要求。如果元素需要排序，且对性能要求不是非常高，可以选择 set 或 multiset；如果对性能要求比较高，可以选择 unordered_set 或 unordered_multiset。</p><h4 id="四个容器的用法："><a href="#四个容器的用法：" class="headerlink" title="四个容器的用法："></a>四个容器的用法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//1.定义</span><br><span class="line">std::set&lt;int&gt; s;</span><br><span class="line">std::multiset&lt;int&gt; ms;</span><br><span class="line">std::unordered_multiset&lt;int&gt; ums;</span><br><span class="line">std::unordered_set&lt;int&gt; us;</span><br><span class="line">//2.插入</span><br><span class="line">s.insert(5);</span><br><span class="line">s.insert(2);</span><br><span class="line">ms.insert(3);</span><br><span class="line">ms.insert(4);</span><br><span class="line">/*后面两个容器也一样*/</span><br><span class="line"></span><br><span class="line">//3.查找元素</span><br><span class="line">auto it = s.find(2);//返回的是迭代器指针</span><br><span class="line">std::cout &lt;&lt; *it;</span><br><span class="line">//4.遍历</span><br><span class="line">for (auto it = s.begin(); it != s.end(); ++it) &#123;</span><br><span class="line">std::cout &lt;&lt; *it &lt;&lt; &quot; &quot;; // 输出 set 容器中的元素</span><br><span class="line">&#125;</span><br><span class="line">for (auto it = ms.begin(); it != ms.end(); ++it) &#123;</span><br><span class="line">std::cout &lt;&lt; *it &lt;&lt; &quot; &quot;; // 输出 multiset 容器中的元素</span><br><span class="line">&#125;</span><br><span class="line">for (auto i : ms)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; i&lt;&lt;&quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">for (auto i : s)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; i&lt;&lt;&quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">//5.合并</span><br><span class="line">s.merge(ms);</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>Map是C++ STL中的一个关联式容器，它提供了一种映射关系的数据结构，即一组key-value对，其中key是唯一的，value可以重复。Map中的元素是按照key的大小进行排序的，因此可以进行快速的查找和插入操作。Map支持[]和insert等操作，可以通过迭代器进行遍历。Map的底层实现一般采用红黑树，因此它的插入、删除和查找操作的时间复杂度都是O(log n)。</p><p>用法：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/*插入，创建，初始化,修改*/</span><br><span class="line">std::map&lt;std::string, int&gt; m&#123; &#123;&quot;CPU&quot;,10&#125; ,&#123;&quot;GPU&quot;,20&#125;&#125;;</span><br><span class="line">m.insert(std::pair&lt;std::string, int&gt;(&quot;ARM&quot;, 35));//插入</span><br><span class="line">m[&quot;ARM&quot;] = 45;</span><br><span class="line">m[&quot;Map&quot;] = 15;//插入新值</span><br><span class="line"></span><br><span class="line">/*遍历方法*/</span><br><span class="line">for (const auto&amp; [key, value] : m)</span><br><span class="line">std::cout &lt;&lt; &#x27;[&#x27; &lt;&lt; key &lt;&lt; &quot;] = &quot; &lt;&lt; value &lt;&lt; &quot;; &quot;;</span><br><span class="line"></span><br><span class="line">for (auto it = m.begin(); it != m.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; it-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; it-&gt;second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h3><p>Multimap是一个允许重复键的Map，它也是一个关联式容器，提供了一种映射关系的数据结构，其中一组key-value对中的key可以重复，而value可以不重复。Multimap的元素同样是按照key的大小进行排序的，并且支持[]和insert等操作，可以通过迭代器进行遍历。Multimap的底层实现一般采用红黑树，因此它的插入、删除和查找操作的时间复杂度也都是O(log n)。</p><p>用法：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//2.multimap</span><br><span class="line">std::multimap&lt;std::string, int&gt; m;</span><br><span class="line">m.insert(std::pair&lt;std::string, int&gt;(&quot;map&quot;, 10));</span><br><span class="line">m.insert(std::pair&lt;std::string, int&gt;(&quot;map&quot;, 10));</span><br><span class="line">m.insert(std::pair&lt;std::string, int&gt;(&quot;map&quot;, 10));</span><br><span class="line">//m[&quot;map&quot;] = 15;//没有[]操作符 error</span><br><span class="line">for (auto it = m.begin(); it != m.end(); it++) &#123;</span><br><span class="line">std::cout &lt;&lt; it-&gt;first &lt;&lt; &quot; : &quot; &lt;&lt; it-&gt;second &lt;&lt;std:: endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Multimap的用法和Map类似，只是插入操作不会覆盖已有的键值对。</p><h3 id="unordered-multimap"><a href="#unordered-multimap" class="headerlink" title="unordered_multimap"></a>unordered_multimap</h3><p>unordered_multimap是一个允许重复键的unordered_map，它也是一个哈希表，提供了一种映射关系的数据结构，其中一组key-value对中的key可以重复，而value可以不重复。unordered_multimap中的元素是按照哈希值进行存储的，因此查找和插入操作的时间复杂度是O(1)。</p><p>用法：<br>unordered_map的用法和Map类似，只是底层实现不同，插入操作的时间复杂度为O(1)。</p><h3 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h3><p>unordered_map是C++ STL中的一个哈希表，它提供了一种映射关系的数据结构，其中一组key-value对中的key是唯一的，而value可以重复。unordered_map中的元素是按照哈希值进行存储的，因此查找和插入操作的时间复杂度是O(1)。</p><p>用法：<br>unordered_multimap的用法和unordered_map类似，只是允许键值对中的键重复。</p><h3 id="区别总结"><a href="#区别总结" class="headerlink" title="区别总结"></a>区别总结</h3><p>Map和Multimap都是基于红黑树实现的，而unordered_map和unordered_multimap都是基于哈希表实现的。因此，Map和Multimap的插入、删除和查找操作的时间复杂度都是O(log n)，而unordered_map和unordered_multimap的插入、删除和查找操作的时间复杂度都是O(1)。另外，Map和Multimap中的元素是按照key的大小进行排序的，而unordered_map和unordered_multimap中的元素是按照哈希值进行存储的，因此它们的遍历顺序可能不同。此外，Multimap和unordered_multimap允许重复键，而Map和unordered_map不允许重复键。</p><h3 id="补充stl算法"><a href="#补充stl算法" class="headerlink" title="补充stl算法"></a>补充stl算法</h3><h4 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound"></a>upper_bound</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;int&gt; v = &#123;1, 2, 3, 4, 4, 6, 7, 8, 9&#125;;</span><br><span class="line">  auto it = std::upper_bound(v.begin(), v.end(), 4);</span><br><span class="line">  if (it != v.end()) &#123;</span><br><span class="line">      std::cout &lt;&lt; &quot;The first element greater than 4 is: &quot; &lt;&lt; *it &lt;&lt; std::endl;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">      std::cout &lt;&lt; &quot;No element greater than 4&quot; &lt;&lt; std::endl;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>std::upper_bound将返回一个迭代器，指向第一个大于value的元素。如果不存在这样的元素，std::upper_bound将返回last。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;cpp知识补充&quot;&gt;&lt;a href=&quot;#cpp知识补充&quot; class=&quot;headerlink&quot; title=&quot;cpp知识补充&quot;&gt;&lt;/a&gt;cpp知识补充&lt;/h1&gt;&lt;p&gt;01 - 侯捷 - C++面向对象高级开发（上下两部曲）&lt;/p&gt;
&lt;p&gt;02 - 侯捷 - STL标</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>GDB调试</title>
    <link href="https://null0x0f.github.io/posts/46594b90.html"/>
    <id>https://null0x0f.github.io/posts/46594b90.html</id>
    <published>2023-04-15T03:31:20.000Z</published>
    <updated>2025-10-16T07:22:52.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GDB调试"><a href="#GDB调试" class="headerlink" title="GDB调试"></a>GDB调试</h1><h2 id="编译c程序"><a href="#编译c程序" class="headerlink" title="编译c程序"></a>编译c程序</h2><p>gcc test.c -o test.out</p><h2 id="生成debug-info文件"><a href="#生成debug-info文件" class="headerlink" title="生成debug info文件"></a>生成debug info文件</h2><p>gcc -g test.c -o test.out</p><h2 id="打断点"><a href="#打断点" class="headerlink" title="打断点"></a>打断点</h2><p>b main<br>b path :行数<br>r<br>n 不进函数体单个执行<br>s  进函数单个执行</p><h2 id="看断点"><a href="#看断点" class="headerlink" title="看断点"></a>看断点</h2><p>info b 看断点<br>d 行数  删除断点<br>c continue</p><p>bt 看函数调用栈</p><h2 id="监视"><a href="#监视" class="headerlink" title="监视"></a>监视</h2><p>watch 变量</p><p>info r 看寄存器的值</p><h2 id="查看代码或汇编"><a href="#查看代码或汇编" class="headerlink" title="查看代码或汇编"></a>查看代码或汇编</h2><p>layout src  查看代码<br>layout asm 查看汇编 </p><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ gdb 调试</span><br><span class="line">(gdb) break 10   //在第十行打断点</span><br><span class="line">Breakpoint 1 at 0x4005f4: file my_program.cpp, line 10.  //第一个断点，在地址 0x4005f4处    file 后面显示的是打在哪个文件  哪一行</span><br><span class="line">(gdb) run      </span><br><span class="line">Starting program: /path/to/my_program </span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at my_program.cpp:10    //第一个断点打在 main()函数，是在my_program.cpp这个源文件的第十行</span><br><span class="line"></span><br><span class="line">10      int x = 0;</span><br><span class="line">(gdb) print x</span><br><span class="line">$1 = 0    //检验x的值是0</span><br><span class="line">(gdb) step  //进函数个体执行</span><br><span class="line">11      x = 1;</span><br><span class="line">(gdb) print x</span><br><span class="line">$2 = 0     </span><br><span class="line">(gdb) next  //不进函数个体执行</span><br><span class="line">12      x = 2;</span><br><span class="line">(gdb) print x</span><br><span class="line">$3 = 1</span><br><span class="line">(gdb) continue</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GDB调试&quot;&gt;&lt;a href=&quot;#GDB调试&quot; class=&quot;headerlink&quot; title=&quot;GDB调试&quot;&gt;&lt;/a&gt;GDB调试&lt;/h1&gt;&lt;h2 id=&quot;编译c程序&quot;&gt;&lt;a href=&quot;#编译c程序&quot; class=&quot;headerlink&quot; title=&quot;编译c</summary>
      
    
    
    
    
  </entry>
  
</feed>
